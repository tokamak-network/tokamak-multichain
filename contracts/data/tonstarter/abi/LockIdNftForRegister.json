{
  "address": "0x48f60aAf60D5E162b2DebFD4F70c88fE01b7c331",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_ERC721_RECEIVED",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_INTERFACE_ID_ERC721",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_INTERFACE_ID_ERC721_ENUMERABLE",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_INTERFACE_ID_ERC721_METADATA",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_allTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_allTokensIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_operatorApprovals",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_ownedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_ownedTokensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_ownedTokensIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokenApprovals",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokenAttributes",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokenOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokenURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aliveImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allIndexOfTimes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "balanceOfLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockId",
          "type": "uint256"
        }
      ],
      "name": "balanceOfLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_timestamp",
          "type": "uint32"
        }
      ],
      "name": "balanceOfLockAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_timestamp",
          "type": "uint32"
        }
      ],
      "name": "balanceOfLockAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "slope",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "bias",
              "type": "int256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "syncTime",
              "type": "uint32"
            }
          ],
          "internalType": "struct LibLockId.SyncInfo",
          "name": "point",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "balanceOfPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "indexCheckOfTimeset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "indexOfTimeset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "managerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "epochUnit_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTime_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastIndexOfTimeset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "lastPointOfTimeIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "slope",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "bias",
              "type": "int256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "syncTime",
              "type": "uint32"
            }
          ],
          "internalType": "struct LibLockId.SyncInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stime",
          "type": "uint256"
        }
      ],
      "name": "nextTimeIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pointHistoryByLockId",
      "outputs": [
        {
          "internalType": "int256",
          "name": "slope",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "syncTime",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pointHistoryByWeek",
      "outputs": [
        {
          "internalType": "int256",
          "name": "slope",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "syncTime",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockId",
          "type": "uint256"
        }
      ],
      "name": "pointHistoryOfId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "slope",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "bias",
              "type": "int256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "syncTime",
              "type": "uint32"
            }
          ],
          "internalType": "struct LibLockId.SyncInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeIndex",
          "type": "uint256"
        }
      ],
      "name": "pointHistoryOfTimeIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "slope",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "bias",
              "type": "int256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "syncTime",
              "type": "uint32"
            }
          ],
          "internalType": "struct LibLockId.SyncInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pointOfLastTimeIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "slope",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "bias",
              "type": "int256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "syncTime",
              "type": "uint32"
            }
          ],
          "internalType": "struct LibLockId.SyncInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lockId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "slope",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "bias",
                  "type": "int256"
                },
                {
                  "internalType": "uint32",
                  "name": "timestamp",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "syncTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibLockId.SyncInfo",
              "name": "packet",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibLockId.SyncPacket[]",
          "name": "packets",
          "type": "tuple[]"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selectorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyLocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_timestamp",
          "type": "uint32"
        }
      ],
      "name": "totalSupplyLocksAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f648eb7b2ebd0186fa24c5a2cf7aea874c95b7b3b1adb20c3140eb71b167df8",
  "receipt": {
    "to": null,
    "from": "0xc1eba383D94c6021160042491A5dfaF1d82694E6",
    "contractAddress": "0x48f60aAf60D5E162b2DebFD4F70c88fE01b7c331",
    "transactionIndex": 0,
    "gasUsed": "2604067",
    "logsBloom": "0x
    "blockHash": "0x2c7cfa284005fe20b05bbd93eef26c42a080612747474036b94953b78ea640b6",
    "transactionHash": "0x9f648eb7b2ebd0186fa24c5a2cf7aea874c95b7b3b1adb20c3140eb71b167df8",
    "logs": [],
    "blockNumber": 23651,
    "cumulativeGasUsed": "2604067",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "0b0fef9a8d6b9c8091d16e0cc52f9a67",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ERC721_RECEIVED\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_INTERFACE_ID_ERC721\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_INTERFACE_ID_ERC721_ENUMERABLE\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_INTERFACE_ID_ERC721_METADATA\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_allTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_allTokensIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_operatorApprovals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ownedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_ownedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ownedTokensIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenApprovals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenAttributes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allIndexOfTimes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOfLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"}],\"name\":\"balanceOfLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_timestamp\",\"type\":\"uint32\"}],\"name\":\"balanceOfLockAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_timestamp\",\"type\":\"uint32\"}],\"name\":\"balanceOfLockAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"syncTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibLockId.SyncInfo\",\"name\":\"point\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"balanceOfPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexCheckOfTimeset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexOfTimeset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"managerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochUnit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTime_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastIndexOfTimeset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"lastPointOfTimeIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"syncTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibLockId.SyncInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stime\",\"type\":\"uint256\"}],\"name\":\"nextTimeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointHistoryByLockId\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"syncTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointHistoryByWeek\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"syncTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"}],\"name\":\"pointHistoryOfId\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"syncTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibLockId.SyncInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeIndex\",\"type\":\"uint256\"}],\"name\":\"pointHistoryOfTimeIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"syncTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibLockId.SyncInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointOfLastTimeIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"syncTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibLockId.SyncInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"syncTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibLockId.SyncInfo\",\"name\":\"packet\",\"type\":\"tuple\"}],\"internalType\":\"struct LibLockId.SyncPacket[]\",\"name\":\"packets\",\"type\":\"tuple[]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_timestamp\",\"type\":\"uint32\"}],\"name\":\"totalSupplyLocksAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOfLock(address)\":{\"notice\":\"\\ud2b9\\uc815 \\uacc4\\uc815\\uc774 \\uc18c\\uc720\\ud55c stos\\ub97c \\uac00\\uc838\\uc634.\"},\"balanceOfLock(uint256)\":{\"notice\":\"\\ud2b9\\uc815 \\ub77d\\uc544\\uc774\\ub514\\uc758 \\ud604\\uc7ac \\uc2dc\\uac04\\uc758 stos\"},\"balanceOfLockAt(uint256,uint32)\":{\"notice\":\"\\ud2b9\\uc815 \\ub77d\\uc544\\uc774\\ub514\\uc758 \\ud604\\uc7ac \\uc2dc\\uac04\\uc758 stos\"},\"lastPointOfTimeIndex(uint256)\":{\"notice\":\"\\ud574\\ub2f9 \\ud0c0\\uc784\\uc758 \\uac00\\uc7a5 \\ucd5c\\uc2e0 \\ud3ec\\uc778\\ud2b8\"},\"pointHistoryOfTimeIndex(uint256)\":{\"notice\":\"\\ud2b9\\uc815 \\ud0c0\\uc784\\uc778\\ub371\\uc2a4\\uc758 \\uc804\\uccb4 \\ud3ec\\uc778\\ud2b8 \\ub9ac\\uc2a4\\ud2b8\"},\"pointOfLastTimeIndex()\":{\"notice\":\"\\uac00\\uc7a5 \\ucd5c\\uadfc\\uc758 \\ud3ec\\uc778\\ud2b8\"},\"totalSupplyLocks()\":{\"notice\":\"\\ud604\\uc7ac \\uc2dc\\uac04\\uc758 \\ucd1d stos\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stos/LockIdNftForRegister.sol\":\"LockIdNftForRegister\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/interfaces/IIERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IIERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x909bdc2f1c48c72997c2d1ad227701a6d46157345692f3486673e591f698c476\",\"license\":\"MIT\"},\"contracts/libraries/LibLockId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title LibLockId\\n */\\nlibrary LibLockId {\\n\\n    // LockId\\uc758 \\ud3ec\\uc778\\ud2b8 \\uc815\\ubcf4\\n    struct Point {\\n        int256 slope;\\n        int256 bias;\\n        uint256 timestamp; // \\ub4f1\\ub85d(\\uc2dc\\uc791)\\uc2dc\\uc810\\n    }\\n\\n    // LockId\\uc758 \\uc794\\uace0\\n    struct LockedInfo {\\n        uint256 start;\\n        uint256 end;\\n        uint256 amount;\\n        uint256 withdrawlTime;\\n    }\\n\\n    // SyncInfo\\n    struct SyncInfo {\\n        int256 slope;\\n        int256 bias;\\n        uint32 timestamp; // point \\uc815\\ubcf4\\uc5d0 \\uc788\\ub294 \\uc778\\ub371\\uc2a4\\uc5d0 \\ud574\\ub2f9\\ud558\\ub294 timestamp\\n        uint32 syncTime; // \\ub3d9\\uae30\\ud654 \\uc2dc\\uc810\\n    }\\n\\n    struct SyncPacket {\\n        uint256 lockId;\\n        SyncInfo packet;\\n    }\\n\\n    struct UnlimitedAmount {\\n        uint32 timestamp;\\n        uint256 amount;\\n    }\\n\\n}\",\"keccak256\":\"0xf1a7a0153b2bd0a20c1dd536adfa44e1c7c3dc7336a37eef2e3166c44285792e\",\"license\":\"MIT\"},\"contracts/proxy/ProxyStorage2.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage2  {\\n\\n    address public _owner;\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n\\n}\",\"keccak256\":\"0x143792b4a69ee77d8ac3bf521938acc34f9e6800751d4db9bae90333b4749a4a\",\"license\":\"Unlicense\"},\"contracts/stos/ERC165P.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IIERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\ncontract ERC165P is IIERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) internal _supportedInterfaces;\\n\\n    constructor () {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\",\"keccak256\":\"0x005572f46a5db276ca3af9344099070a4d8070456e313e20048ce6eca9619550\",\"license\":\"MIT\"},\"contracts/stos/LockIdNftForRegister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../proxy/ProxyStorage2.sol\\\";\\nimport \\\"./LockIdRegisterStorage1.sol\\\";\\nimport \\\"./LockIdRegisterStorage2.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract LockIdNftForRegister is\\n    ProxyStorage2,\\n    LockIdRegisterStorage1,\\n    LockIdRegisterStorage2,\\n    IERC721, IERC721Metadata, IERC721Enumerable\\n{\\n    // using SafeMath for uint256;\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    modifier nonZero(uint256 _val) {\\n        require(_val != 0, \\\"zero value\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"not owner\\\");\\n        _;\\n    }\\n\\n    constructor (){}\\n\\n    /*** External onlyManager ***/\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address managerAddress,\\n        uint256 epochUnit_,\\n        uint256 maxTime_\\n    ) external onlyOwner {\\n        _manager = managerAddress;\\n        _name = name_;\\n        _symbol = symbol_;\\n        epochUnit = epochUnit_;\\n        maxTime = maxTime_;\\n    }\\n\\n    /*** External ***/\\n    function register(\\n        address account,\\n        LibLockId.SyncPacket[] memory packets\\n        )\\n        public onlyManager\\n    {\\n        require(packets.length !=0, 'no data');\\n        for(uint256 i = 0; i < packets.length; i++){\\n            if(!_exists(packets[i].lockId)) {\\n                _safeMint(account, packets[i].lockId);\\n            }\\n            _deposit(account, packets[i].lockId, packets[i].packet);\\n        }\\n    }\\n\\n    /*** Public ***/\\n    function approve(address to, uint256 tokenId) public virtual override {\\n\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n\\n    }\\n\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n\\n    }\\n\\n    /*** View ***/\\n\\n    // /**\\n    //  * @dev Overrides supportsInterface\\n    //  */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165P) returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    function manager() public view virtual returns (address) {\\n        return _manager;\\n    }\\n\\n    function isManager(address addr) public view virtual returns (bool) {\\n\\n        if(_manager == addr) return true;\\n        else return false;\\n    }\\n\\n    function balanceOf(address owner_) public view override returns (uint256) {\\n        require(owner_ != address(0), \\\"LockIdNFT: balance query for the zero address\\\");\\n\\n        return _ownedTokensCount[owner_];\\n    }\\n\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        address owner_ = _tokenOwner[tokenId];\\n        require(owner_ != address(0), \\\"LockIdNFT: owner query for nonexistent token\\\");\\n\\n        return owner_;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        return '';\\n    }\\n\\n    function tokenOfOwnerByIndex(address owner_, uint256 index) public view override returns (uint256) {\\n        require(index < balanceOf(owner_), \\\"LockIdNFT: owner index out of bounds\\\");\\n        return _ownedTokens[owner_][index];\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\\n        require(index < totalSupply(), \\\"LockIdNFT: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    function allTokens() public view returns (uint256[] memory) {\\n        return _allTokens;\\n    }\\n\\n    function tokensOfOwner(address owner_) public view returns (uint256[] memory) {\\n        return _ownedTokens[owner_];\\n    }\\n\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n    }\\n\\n    function isApprovedForAll(address owner_, address operator) public view virtual override returns (bool) {\\n    }\\n\\n    /*** internal ***/\\n\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        address owner_ = _tokenOwner[tokenId];\\n        return owner_ != address(0);\\n    }\\n\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        require(tokenId != 0, \\\"not allowed tokenId\\\");\\n        _mint(to, tokenId);\\n\\n        _addTokenToOwnerEnumeration(to, tokenId);\\n\\n        _addTokenToAllTokensEnumeration(tokenId);\\n\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"LockIdNFT: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"LockIdNFT: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"LockIdNFT: token already minted\\\");\\n\\n        // _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        _tokenOwner[tokenId] = to;\\n        unchecked {\\n            _ownedTokensCount[to] += 1;\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n        //  _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\\n        _ownedTokens[to].push(tokenId);\\n    }\\n\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _ownedTokens[from].length-1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        //_ownedTokens[from].length--;\\n        _ownedTokens[from].pop();\\n\\n        // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\\n        // lastTokenId, or just over the end of the array if the token was the last one).\\n    }\\n\\n\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length-1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        //_allTokens.length--;\\n        _allTokens.pop();\\n        _allTokensIndex[tokenId] = 0;\\n    }\\n\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            msg.sender,\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"LockIdNFT: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n\\n    /// @dev Deposit\\n    function _deposit(\\n        address _addr,\\n        uint256 _lockId,\\n        LibLockId.SyncInfo memory syncInfo\\n    ) internal ifFree {\\n\\n        /////////////////////////////////////////////////\\n        // add point of LockId , \\uac00\\uc7a5 \\ucd5c\\uadfc\\uc758 \\ud3ec\\uc778\\ud2b8 (\\ubaa8\\ub450 \\ub204\\uc801 \\ubc18\\uc601)\\n        uint256 lenOfId = pointHistoryByLockId[_lockId].length;\\n        LibLockId.SyncInfo memory pointByIdOld ;\\n        LibLockId.SyncInfo memory pointByIdNew = LibLockId.SyncInfo({\\n            slope: syncInfo.slope,\\n            bias: syncInfo.bias,\\n            timestamp : syncInfo.timestamp,\\n            syncTime : uint32(block.timestamp)\\n        });\\n\\n        if(lenOfId > 0) pointByIdOld = pointHistoryByLockId[_lockId][lenOfId-1];\\n        else {\\n            pointByIdOld = LibLockId.SyncInfo({\\n                slope: 0,\\n                bias: 0,\\n                timestamp : 0,\\n                syncTime : 0\\n            });\\n        }\\n\\n        /////////////////////////////////////////////////\\n        // \\ubcc0\\uacbd\\ub41c \\uac12\\n        LibLockId.SyncInfo memory pointByIdChange = LibLockId.SyncInfo({\\n            slope: pointByIdNew.slope - pointByIdOld.slope,\\n            bias: pointByIdNew.bias - pointByIdOld.bias,\\n            timestamp : syncInfo.timestamp,\\n            syncTime : uint32(block.timestamp)\\n        });\\n\\n        /////////////////////////////////////////////////\\n        // \\ub77d\\uc544\\uc774\\ub514 \\ubc18\\uc601\\n        pointHistoryByLockId[_lockId].push(pointByIdNew);\\n\\n        /////////////////////////////////////////////////\\n        // point history based time\\n        // deposit\\ud558\\uba74 \\ub2e4\\uac00\\uc624\\ub294 \\ubaa9\\uc694\\uc77c \\uc2dc\\uac04\\uc5d0 \\ub204\\uc801\\ub418\\uc5b4\\uc57c \\ud55c\\ub2e4..\\ucd1d \\uae08\\uc561\\uc774 \\ub2e4\\uc74c \\ud0c0\\uc784\\uc778\\ub371\\uc2a4\\uc5d0 \\ubc18\\uc601\\ub41c\\ub2e4\\uace0 \\ubcf4\\uc544\\uc57c \\ud55c\\ub2e4.\\n        uint256 nextTimeIndexOfTotalPoint =  nextTimeIndex(block.timestamp);\\n\\n        uint256 len = pointHistoryByWeek[nextTimeIndexOfTotalPoint].length;\\n        LibLockId.SyncInfo memory pointLast ; // \\uac00\\uc7a5 \\ucd5c\\uadfc\\uc758 point\\n\\n        if (len == 0 ) {\\n            // \\uac00\\uc7a5 \\ucd5c\\uadfc \\uc778\\ub371\\uc2a4\\n            pointLast = pointOfLastTimeIndex();\\n        } else {\\n            pointLast = pointHistoryByWeek[nextTimeIndexOfTotalPoint][len-1];\\n        }\\n\\n        LibLockId.SyncInfo memory pointNew = LibLockId.SyncInfo({\\n            slope: pointLast.slope + pointByIdChange.slope,\\n            bias: pointLast.bias + pointByIdChange.bias,\\n            timestamp : syncInfo.timestamp,\\n            syncTime : uint32(block.timestamp)\\n        });\\n\\n        /////////////////////////////////////////////////\\n        // \\ucd1d\\uacc4 \\uc9d1\\uacc4\\ub97c \\uc704\\ud55c \\ub77d\\uc544\\uc774\\ub514 \\ubc18\\uc601\\n        pointHistoryByWeek[nextTimeIndexOfTotalPoint].push(pointNew);\\n\\n        if(!indexCheckOfTimeset[nextTimeIndexOfTotalPoint]) {\\n            indexCheckOfTimeset[nextTimeIndexOfTotalPoint] = true;\\n            indexOfTimeset.push(nextTimeIndexOfTotalPoint);\\n        }\\n    }\\n\\n    function nextTimeIndex(uint256 _stime) public view returns(uint256) {\\n        return (_stime +  epochUnit / epochUnit * epochUnit);\\n    }\\n\\n    function lastIndexOfTimeset() public view returns(uint256 index) {\\n        index = (indexOfTimeset.length != 0 ? indexOfTimeset[indexOfTimeset.length - 1]:0);\\n    }\\n\\n    /// \\uac00\\uc7a5 \\ucd5c\\uadfc\\uc758 \\ud3ec\\uc778\\ud2b8\\n    function pointOfLastTimeIndex() public view returns(LibLockId.SyncInfo memory) {\\n        return lastPointOfTimeIndex(lastIndexOfTimeset());\\n    }\\n\\n    /// \\ud574\\ub2f9 \\ud0c0\\uc784\\uc758 \\uac00\\uc7a5 \\ucd5c\\uc2e0 \\ud3ec\\uc778\\ud2b8\\n    function lastPointOfTimeIndex(uint256 _index) public view returns(LibLockId.SyncInfo memory) {\\n        if (_index != 0) {\\n            LibLockId.SyncInfo[] memory points = pointHistoryByWeek[_index];\\n\\n            if (points.length != 0) {\\n                return LibLockId.SyncInfo({\\n                    slope: points[points.length-1].slope,\\n                    bias: points[points.length-1].bias,\\n                    timestamp: points[points.length-1].timestamp,\\n                    syncTime : points[points.length-1].syncTime\\n                });\\n            } else {\\n                return LibLockId.SyncInfo({\\n                    slope: 0,\\n                    bias: 0,\\n                    timestamp: 0,\\n                    syncTime : 0\\n                });\\n            }\\n        } else return LibLockId.SyncInfo({\\n                    slope: 0,\\n                    bias: 0,\\n                    timestamp: 0,\\n                    syncTime : 0\\n                });\\n    }\\n\\n    // \\ud2b9\\uc815 \\ub77d\\uc544\\uc544\\ub514\\uc758 \\uc804\\uccb4 \\ud3ec\\uc778\\ud2b8 \\ub9ac\\uc2a4\\ud2b8\\n    function pointHistoryOfId(uint256 _lockId)\\n        public\\n        view\\n        returns (LibLockId.SyncInfo[] memory)\\n    {\\n        return pointHistoryByLockId[_lockId];\\n    }\\n\\n\\n    /// \\ud2b9\\uc815 \\ud0c0\\uc784\\uc778\\ub371\\uc2a4\\uc758 \\uc804\\uccb4 \\ud3ec\\uc778\\ud2b8 \\ub9ac\\uc2a4\\ud2b8\\n    function pointHistoryOfTimeIndex(uint256 _timeIndex)\\n        public\\n        view\\n        returns (LibLockId.SyncInfo[] memory)\\n    {\\n        return pointHistoryByWeek[_timeIndex];\\n    }\\n\\n    /// \\ud2b9\\uc815 \\uacc4\\uc815\\uc774 \\uc18c\\uc720\\ud55c stos\\ub97c \\uac00\\uc838\\uc634.\\n    function balanceOfLock(address _addr)\\n        public\\n        view\\n        returns (uint256 balance)\\n    {\\n        uint256[] memory locks = tokensOfOwner(_addr);\\n        if (locks.length == 0) return 0;\\n        for (uint256 i = 0; i < locks.length; ++i) {\\n            balance += balanceOfLock(locks[i]);\\n        }\\n    }\\n\\n    function balanceOfLockAt(address _addr, uint32 _timestamp)\\n        public\\n        view\\n        returns (uint256 balance)\\n    {\\n        uint256[] memory locks = tokensOfOwner(_addr);\\n        if (locks.length == 0) return 0;\\n        for (uint256 i = 0; i < locks.length; ++i) {\\n            balance += balanceOfLockAt(locks[i], _timestamp);\\n        }\\n    }\\n\\n    /// \\ud2b9\\uc815 \\ub77d\\uc544\\uc774\\ub514\\uc758 \\ud604\\uc7ac \\uc2dc\\uac04\\uc758 stos\\n    function balanceOfLock(uint256 _lockId)\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        uint256 len = pointHistoryByLockId[_lockId].length;\\n        amount = (len == 0? 0: balanceOfPoint(pointHistoryByLockId[_lockId][len - 1], block.timestamp));\\n    }\\n\\n    /// \\ud2b9\\uc815 \\ub77d\\uc544\\uc774\\ub514\\uc758 \\ud604\\uc7ac \\uc2dc\\uac04\\uc758 stos\\n    function balanceOfLockAt(uint256 _lockId, uint32 _timestamp)\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        (bool success, LibLockId.SyncInfo memory point) = _findClosestPoint(\\n            pointHistoryByLockId[_lockId], _timestamp);\\n        amount = (!success? 0: balanceOfPoint(point, _timestamp));\\n    }\\n\\n    /// \\ud604\\uc7ac \\uc2dc\\uac04\\uc758 \\ucd1d stos\\n    function totalSupplyLocks()\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n       amount = balanceOfPoint(pointOfLastTimeIndex(), block.timestamp);\\n    }\\n\\n    function totalSupplyLocksAt(uint32 _timestamp)\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        // \\ud574\\ub2f9 \\ud0c0\\uc784\\uc5d0 \\ub9de\\ub294 \\ud0c0\\uc784\\uc778\\ub371\\uc2a4\\n        (bool success, uint256 timeindex) = _findClosestTimeindex(_timestamp);\\n        if(!success) return 0;\\n        (bool success1, LibLockId.SyncInfo memory point) = _findClosestPoint(\\n            pointHistoryByWeek[timeindex], _timestamp);\\n        if(!success1) return 0;\\n        amount = balanceOfPoint(point, _timestamp);\\n    }\\n\\n    function balanceOfPoint(LibLockId.SyncInfo memory point, uint256 timestamp)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        if(timestamp < point.syncTime) return 0;\\n        int256 currentBias = point.slope * int256(timestamp - point.timestamp);\\n        return\\n            uint256(point.bias > currentBias ? (point.bias - currentBias) : int256(0)) / MULTIPLIER;\\n    }\\n\\n    function allIndexOfTimes() public view returns(uint256[] memory){\\n        return indexOfTimeset;\\n    }\\n\\n    function _findClosestPoint(\\n        LibLockId.SyncInfo[] storage _history,\\n        uint32 _timestamp\\n    ) internal view returns(bool success, LibLockId.SyncInfo memory point) {\\n        if (_history.length == 0) {\\n            return (false, point);\\n        }\\n        uint256 left = 0;\\n        uint256 right = _history.length;\\n        while (left + 1 < right) {\\n            uint256 mid = (left + right) / 2;\\n            if (_history[mid].syncTime <= _timestamp) {\\n                left = mid;\\n            } else {\\n                right = mid;\\n            }\\n        }\\n\\n        if (_history[left].syncTime <= _timestamp) {\\n            return (true, _history[left]);\\n        }\\n        return (false, point);\\n    }\\n\\n    function _findClosestTimeindex(\\n        uint256 _timestamp\\n    ) internal view returns(bool success, uint256 timeindex) {\\n        uint256 totalLen = indexOfTimeset.length;\\n        uint256 timeIndexKey =  (_timestamp + epochUnit) * epochUnit / epochUnit ;\\n\\n        if (totalLen == 0) {\\n            return (false, 0);\\n        }\\n        uint256 left = 0;\\n        uint256 right = totalLen;\\n\\n        while (left + 1 < right) {\\n            uint256 mid = (left + right) / 2;\\n            if (indexOfTimeset[mid] <= timeIndexKey) {\\n                left = mid;\\n            } else {\\n                right = mid;\\n            }\\n        }\\n\\n        if (indexOfTimeset[left] <= timeIndexKey) {\\n            return (true, indexOfTimeset[left]);\\n        }\\n        return (false, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x5407888343c6ca673daa53dc204bcced0fbb27352121960b1fc768dd418627af\",\"license\":\"MIT\"},\"contracts/stos/LockIdRegisterStorage1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ERC165P.sol\\\";\\n\\ncontract LockIdRegisterStorage1 is ERC165P {\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 public constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    address public _manager;\\n\\n    // Token name\\n    string public _name;\\n\\n    // Token symbol\\n    string public _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) public _tokenURIs;\\n\\n    // attributes\\n    mapping (uint256 => uint8) public _tokenAttributes;\\n\\n    // Base URI\\n    string public _baseURI;\\n\\n    // Mapping from token ID to owner\\n    mapping (uint256 => address) public _tokenOwner; // _owners\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) public _tokenApprovals;\\n\\n    // Mapping from owner to number of owned token\\n    mapping (address => uint256) public _ownedTokensCount; // _balances\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) public _operatorApprovals;\\n\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => uint256[]) public _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) public _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] public _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) public _allTokensIndex;\\n\\n    bool internal _lock;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 public constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 public constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 public constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    modifier onlyManager() {\\n        require(_manager == msg.sender, \\\"not manager\\\");\\n        _;\\n    }\\n\\n    modifier ifFree {\\n        require(_lock != true, \\\"in use\\\");\\n        _lock = true;\\n        _;\\n        _lock = false;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0e118a0aefaed57730214886764cb517b3aa4ef67da8b64388f68ba31fe5e740\",\"license\":\"MIT\"},\"contracts/stos/LockIdRegisterStorage2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../libraries//LibLockId.sol\\\";\\n\\ncontract LockIdRegisterStorage2 {\\n\\n    uint256 public constant MULTIPLIER = 1e18;\\n\\n    uint256 public epochUnit;\\n    uint256 public maxTime;\\n\\n    // id - point , \\ud2b9\\uc815\\uc544\\uc774\\ub514\\uc758 \\ud3ec\\uc778\\ud2b8\\ub97c \\ubaa8\\ub450 \\uc800\\uc7a5\\n    mapping(uint256 => LibLockId.SyncInfo[]) public pointHistoryByLockId;\\n\\n    // \\uc2dc\\uac04\\ub300\\uc21c\\uc73c\\ub85c \\ubaa8\\ub4e0 stos\\ub97c \\uad00\\ub9ac\\ud558\\ub294 \\uc815\\ubcf4\\n    // \\uc2dc\\uac04\\ub300\\uc758 \\ud0c0\\uc784 (\\ub9e4\\uc8fc\\ubaa9\\uc694\\uc77c0\\uc2dc) -> \\ud574\\ub2f9 \\uc2dc\\uac04\\ub300\\uc758 \\ud3ec\\uc778\\ud2b8 \\ubc30\\uc5f4\\n    mapping(uint256 => LibLockId.SyncInfo[]) public pointHistoryByWeek;\\n\\n    // \\uc5c5\\ub370\\uc774\\ud2b8\\uac00 \\uc788\\ub294 \\uc8fc(\\ud0c0\\uc784)\\uc5d0 \\ub300\\ud55c \\uc778\\ub371\\uc2f1\\n    uint256[] public indexOfTimeset;\\n    mapping(uint256 => bool) public indexCheckOfTimeset;\\n}\\n\",\"keccak256\":\"0xc62d5279764b6ef7aa91b311df7146bb384e7e804dfc0ddbad9102196f19b920\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000246301ffc9a760e01b6200002a565b620000ae565b6001600160e01b03198082169003620000895760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640160405180910390fd5b6001600160e01b0319166000908152600460205260409020805460ff19166001179055565b612dbb80620000be6000396000f3fe608060405234801561001057600080fd5b50600436106104215760003560e01c80638462151c11610235578063b94419e011610135578063e178ee20116100c8578063f3ae241511610097578063f88d1fef1161007c578063f88d1fef14610a01578063f975d9f314610a09578063fd2dcecf14610a1c57600080fd5b8063f3ae2415146109ce578063f6631718146109e157600080fd5b8063e178ee2014610964578063e985e9c514610977578063edc3bc3f1461098d578063f0329f6b146109bb57600080fd5b8063cea823cd11610104578063cea823cd14610923578063d28d885214610946578063de6961801461094e578063dece68541461095657600080fd5b8063b94419e0146108bc578063ba209fcf146108cf578063c87b56dd146108ef578063cdc4717c1461091057600080fd5b8063a7cc0136116101c8578063b01ac59111610197578063b2bdfa7b1161017c578063b2bdfa7b1461086c578063b88d4fde1461087f578063b911135f1461089357600080fd5b8063b01ac59114610856578063b09f12661461086457600080fd5b8063a7cc0136146107f2578063a898e9fa1461081b578063aa5965ae14610823578063aa88652b1461083657600080fd5b8063a22cb46511610204578063a22cb46514610791578063a2e9b4391461079f578063a36c36e5146107bf578063a7263665146107d257600080fd5b80638462151c1461074157806388290adc1461075457806394a509dd1461077b57806395d89b411461078957600080fd5b80633e47a4b1116103405780636352211e116102d357806370a08231116102a2578063743976a011610287578063743976a0146106fd5780637482313214610705578063796db3121461071857600080fd5b806370a08231146106d7578063743500ad146106ea57600080fd5b80636352211e1461068257806363a8fd89146106955780636c0360eb146106ba5780636ff97f1d146106c257600080fd5b80634f6ccce71161030f5780634f6ccce71461061057806350d2a27614610623578063550d01a31461064c5780635896f5281461066f57600080fd5b80633e47a4b1146105d957806342842e0e14610559578063481c6a75146105ec5780634f3c5f06146105fd57600080fd5b806317a3a79c116103b857806328f02c681161038757806328f02c681461056c5780632f745c59146105ab57806334067c3c146105be578063366c0ae7146105c657600080fd5b806317a3a79c1461051357806318160ddd1461054857806322e67e711461055057806323b872dd1461055957600080fd5b8063081812fc116103f4578063081812fc146104ad578063095ea7b3146104d95780630bb78ec1146104ed57806310c113601461050057600080fd5b806301ffc9a7146104265780630346759314610468578063059f8b161461048957806306fdde0314610498575b600080fd5b610453610434366004612411565b6001600160e01b03191660009081526004602052604090205460ff1690565b60405190151581526020015b60405180910390f35b61047b610476366004612459565b610a25565b60405190815260200161045f565b61047b670de0b6b3a764000081565b6104a0610a9a565b60405161045f91906124dc565b6104c16104bb3660046124ef565b50600090565b6040516001600160a01b03909116815260200161045f565b6104eb6104e7366004612508565b5050565b005b6104a06104fb3660046124ef565b610b2c565b61047b61050e3660046124ef565b610bc6565b6105366105213660046124ef565b60096020526000908152604090205460ff1681565b60405160ff909116815260200161045f565b60115461047b565b61047b60155481565b6104eb610567366004612532565b505050565b61057f61057a36600461256e565b610be7565b60408051948552602085019390935263ffffffff9182169284019290925216606082015260800161045f565b61047b6105b9366004612508565b610c3b565b61047b610ce2565b61047b6105d4366004612590565b610d25565b61047b6105e73660046125b3565b610d6c565b6005546001600160a01b03166104c1565b61047b61060b366004612508565b610ddd565b61047b61061e3660046124ef565b610e0e565b6104c1610631366004612411565b6003602052600090815260409020546001600160a01b031681565b61045361065a3660046125b3565b60026020526000908152604090205460ff1681565b61047b61067d3660046126b2565b610e9a565b6104c16106903660046124ef565b610f19565b6000546104539074010000000000000000000000000000000000000000900460ff1681565b6104a0610fa4565b6106ca610fb3565b60405161045f91906126dd565b61047b6106e53660046125b3565b61100a565b6104eb6106f8366004612721565b6110a4565b6104a0611205565b6104eb61071336600461287e565b611212565b6104c16107263660046124ef565b600b602052600090815260409020546001600160a01b031681565b6106ca61074f3660046125b3565b6112a8565b610762630a85bd0160e11b81565b6040516001600160e01b0319909116815260200161045f565b610762635b5e139f60e01b81565b6104a0611314565b6104eb6104e7366004612904565b61047b6107ad3660046124ef565b60106020526000908152604090205481565b61047b6107cd366004612940565b611323565b61047b6107e03660046124ef565b60126020526000908152604090205481565b6104c16108003660046124ef565b600c602052600090815260409020546001600160a01b031681565b6106ca611393565b61047b6108313660046124ef565b6113e9565b6108496108443660046124ef565b6113f9565b60405161045f919061295b565b61076263780e9d6360e01b81565b6104a06115f8565b6000546104c1906001600160a01b031681565b6104eb61088d366004612996565b50505050565b6104c16108a13660046124ef565b6001602052600090815260409020546001600160a01b031681565b61047b6108ca3660046124ef565b611605565b6108e26108dd3660046124ef565b6116ae565b60405161045f9190612a12565b6104a06108fd3660046124ef565b5060408051602081019091526000815290565b61047b61091e3660046124ef565b611752565b6104536109313660046124ef565b60196020526000908152604090205460ff1681565b6104a0611776565b61047b611783565b6107626380ac58cd60e01b81565b61057f61097236600461256e565b611796565b610453610985366004612a81565b600092915050565b61045361099b366004612a81565b600e60209081526000928352604080842090915290825290205460ff1681565b6005546104c1906001600160a01b031681565b6104536109dc3660046125b3565b6117b2565b61047b6109ef3660046125b3565b600d6020526000908152604090205481565b6108496117da565b6108e2610a173660046124ef565b611809565b61047b60145481565b600080610a31846112a8565b90508051600003610a46576000915050610a94565b60005b8151811015610a9157610a75828281518110610a6757610a67612aab565b602002602001015185610d25565b610a7f9084612ad7565b9250610a8a81612aea565b9050610a49565b50505b92915050565b606060068054610aa990612b03565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad590612b03565b8015610b225780601f10610af757610100808354040283529160200191610b22565b820191906000526020600020905b815481529060010190602001808311610b0557829003601f168201915b5050505050905090565b60086020526000908152604090208054610b4590612b03565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7190612b03565b8015610bbe5780601f10610b9357610100808354040283529160200191610bbe565b820191906000526020600020905b815481529060010190602001808311610ba157829003601f168201915b505050505081565b60188181548110610bd657600080fd5b600091825260209091200154905081565b60176020528160005260406000208181548110610c0357600080fd5b600091825260209091206003909102018054600182015460029092015490935090915063ffffffff8082169164010000000090041684565b6000610c468361100a565b8210610ca55760405162461bcd60e51b8152602060048201526024808201527f4c6f636b49644e46543a206f776e657220696e646578206f7574206f6620626f604482015263756e647360e01b60648201526084015b60405180910390fd5b6001600160a01b0383166000908152600f60205260409020805483908110610ccf57610ccf612aab565b9060005260206000200154905092915050565b6018546000908103610cf45750600090565b60188054610d0490600190612b3d565b81548110610d1457610d14612aab565b90600052602060002001545b905090565b600082815260166020526040812081908190610d419085611898565b915091508115610d6057610d5b818563ffffffff16610e9a565b610d63565b60005b95945050505050565b600080610d78836112a8565b90508051600003610d8c5750600092915050565b60005b8151811015610dd657610dba828281518110610dad57610dad612aab565b6020026020010151611605565b610dc49084612ad7565b9250610dcf81612aea565b9050610d8f565b5050919050565b600f6020528160005260406000208181548110610df957600080fd5b90600052602060002001600091509150505481565b6000610e1960115490565b8210610e755760405162461bcd60e51b815260206004820152602560248201527f4c6f636b49644e46543a20676c6f62616c20696e646578206f7574206f6620626044820152646f756e647360d81b6064820152608401610c9c565b60118281548110610e8857610e88612aab565b90600052602060002001549050919050565b6000826060015163ffffffff16821015610eb657506000610a94565b6000836040015163ffffffff1683610ece9190612b3d565b8451610eda9190612b50565b9050670de0b6b3a764000081856020015113610ef7576000610f07565b818560200151610f079190612b80565b610f119190612ba7565b949350505050565b6000818152600b60205260408120546001600160a01b031680610a945760405162461bcd60e51b815260206004820152602c60248201527f4c6f636b49644e46543a206f776e657220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610c9c565b6060600a8054610aa990612b03565b60606011805480602002602001604051908101604052809291908181526020018280548015610b2257602002820191906000526020600020905b815481526020019060010190808311610fed575050505050905090565b60006001600160a01b0382166110885760405162461bcd60e51b815260206004820152602d60248201527f4c6f636b49644e46543a2062616c616e636520717565727920666f722074686560448201527f207a65726f2061646472657373000000000000000000000000000000000000006064820152608401610c9c565b506001600160a01b03166000908152600d602052604090205490565b6005546001600160a01b031633146110fe5760405162461bcd60e51b815260206004820152600b60248201527f6e6f74206d616e616765720000000000000000000000000000000000000000006044820152606401610c9c565b80516000036111395760405162461bcd60e51b81526020600482015260076024820152666e6f206461746160c81b6044820152606401610c9c565b60005b81518110156105675761118382828151811061115a5761115a612aab565b6020026020010151600001516000908152600b60205260409020546001600160a01b0316151590565b6111ae576111ae8383838151811061119d5761119d612aab565b602002602001015160000151611a12565b6111f3838383815181106111c4576111c4612aab565b6020026020010151600001518484815181106111e2576111e2612aab565b602002602001015160200151611a2c565b806111fd81612aea565b91505061113c565b600a8054610b4590612b03565b6000546001600160a01b031633146112585760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b6044820152606401610c9c565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055600661128c8682612c17565b5060076112998582612c17565b50601491909155601555505050565b6001600160a01b0381166000908152600f602090815260409182902080548351818402810184019094528084526060939283018282801561130857602002820191906000526020600020905b8154815260200190600101908083116112f4575b50505050509050919050565b606060078054610aa990612b03565b60008060006113378463ffffffff16611e6b565b915091508161134a575060009392505050565b600081815260176020526040812081906113649087611898565b91509150816113795750600095945050505050565b611389818763ffffffff16610e9a565b9695505050505050565b60606018805480602002602001604051908101604052809291908181526020018280548015610b225760200282019190600052602060002090815481526020019060010190808311610fed575050505050905090565b60118181548110610bd657600080fd5b60408051608081018252600080825260208201819052918101829052606081019190915281156115ca57600082815260176020908152604080832080548251818502810185019093528083529192909190849084015b828210156114b35760008481526020908190206040805160808101825260038602909201805483526001808201548486015260029091015463ffffffff8082169385019390935264010000000090049091166060830152908352909201910161144f565b505050509050805160001461159f57604051806080016040528082600184516114dc9190612b3d565b815181106114ec576114ec612aab565b6020026020010151600001518152602001826001845161150c9190612b3d565b8151811061151c5761151c612aab565b6020026020010151602001518152602001826001845161153c9190612b3d565b8151811061154c5761154c612aab565b60200260200101516040015163ffffffff16815260200182600184516115729190612b3d565b8151811061158257611582612aab565b60200260200101516060015163ffffffff16815250915050919050565b5050604080516080810182526000808252602082018190529181018290526060810191909152919050565b505060408051608081018252600080825260208201819052918101829052606081019190915290565b919050565b60078054610b4590612b03565b60008181526016602052604081205480156116a457600083815260166020526040902061169f90611637600184612b3d565b8154811061164757611647612aab565b60009182526020918290206040805160808101825260039093029091018054835260018101549383019390935260029092015463ffffffff808216938301939093526401000000009004909116606082015242610e9a565b6116a7565b60005b9392505050565b606060166000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156117475760008481526020908190206040805160808101825260038602909201805483526001808201548486015260029091015463ffffffff808216938501939093526401000000009004909116606083015290835290920191016116e3565b505050509050919050565b6014546000906117628180612ba7565b61176c9190612cd7565b610a949083612ad7565b60068054610b4590612b03565b6000610d206117906117da565b42610e9a565b60166020528160005260406000208181548110610c0357600080fd5b6005546000906001600160a01b038084169116036117d257506001919050565b506000919050565b604080516080810182526000808252602082018190529181018290526060810191909152610d20610844610ce2565b60008181526017602090815260408083208054825181850281018501909352808352606094929391929091840182156117475760008481526020908190206040805160808101825260038602909201805483526001808201548486015260029091015463ffffffff808216938501939093526401000000009004909116606083015290835290920191016116e3565b604080516080810182526000808252602082018190529181018290526060810182905283546000036118cd5760009150611a0b565b83546000905b806118df836001612ad7565b101561195157600060026118f38385612ad7565b6118fd9190612ba7565b90508563ffffffff1687828154811061191857611918612aab565b6000918252602090912060039091020160020154640100000000900463ffffffff16116119475780925061194b565b8091505b506118d3565b8463ffffffff1686838154811061196a5761196a612aab565b6000918252602090912060039091020160020154640100000000900463ffffffff1611611a045760018683815481106119a5576119a5612aab565b60009182526020918290206040805160808101825260039093029091018054835260018101549383019390935260029092015463ffffffff80821693830193909352640100000000900490911660608201529094509250611a0b915050565b6000935050505b9250929050565b6104e7828260405180602001604052806000815250611f74565b60135460ff161515600103611a6c5760405162461bcd60e51b8152602060048201526006602482015265696e2075736560d01b6044820152606401610c9c565b6013805460ff19166001179055600082815260166020908152604080832054815160808101835284815292830184905290820183905260608201929092526040805160808101825284518152602080860151908201528482015163ffffffff908116928201929092524290911660608201528215611b66576000858152601660205260409020611afd600185612b3d565b81548110611b0d57611b0d612aab565b60009182526020918290206040805160808101825260039093029091018054835260018101549383019390935260029092015463ffffffff80821693830193909352640100000000900490911660608201529150611b9a565b60405180608001604052806000815260200160008152602001600063ffffffff168152602001600063ffffffff1681525091505b6000604051806080016040528084600001518460000151611bbb9190612b80565b815260200184602001518460200151611bd49190612b80565b815260408088015163ffffffff908116602080850191909152428083169484019490945260008b8152601682528381208054600181810183559183528383208a5160039092020190815592890151908301559287015160029091018054606089015184166401000000000267ffffffffffffffff199091169290931691909117919091179055919250611c6690611752565b60008181526017602090815260408083205481516080810183528481529283018490529082018390526060820183905292935090829003611cb057611ca96117da565b9050611d2e565b6000838152601760205260409020611cc9600184612b3d565b81548110611cd957611cd9612aab565b60009182526020918290206040805160808101825260039093029091018054835260018101549383019390935260029092015463ffffffff808216938301939093526401000000009004909116606082015290505b6000604051806080016040528086600001518460000151611d4f9190612cee565b815260200186602001518460200151611d689190612cee565b81526040808c015163ffffffff90811660208085019190915242821693830193909352600088815260178452828120805460018181018355918352858320875160039092020190815586860151918101919091558584015160029091018054606088015185166401000000000267ffffffffffffffff19909116929094169190911792909217909155878152601990925290205490915060ff16611e54576000848152601960205260408120805460ff191660019081179091556018805491820181559091527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e018490555b50506013805460ff19169055505050505050505050565b6018546014546000918291829080611e838188612ad7565b611e8d9190612cd7565b611e979190612ba7565b905081600003611eae575060009485945092505050565b6000825b80611ebe836001612ad7565b1015611f145760006002611ed28385612ad7565b611edc9190612ba7565b90508360188281548110611ef257611ef2612aab565b906000526020600020015411611f0a57809250611f0e565b8091505b50611eb2565b8260188381548110611f2857611f28612aab565b906000526020600020015411611f6557600160188381548110611f4d57611f4d612aab565b90600052602060002001549550955050505050915091565b50600096879650945050505050565b81600003611fc45760405162461bcd60e51b815260206004820152601360248201527f6e6f7420616c6c6f77656420746f6b656e4964000000000000000000000000006044820152606401610c9c565b611fce83836120c4565b6001600160a01b0383166000908152600f6020908152604080832080548685526010845282852081905560018082018355918552838520018690556011805487865260129094529184208390558201815582527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680183905561205290848484612204565b6105675760405162461bcd60e51b815260206004820152603560248201527f4c6f636b49644e46543a207472616e7366657220746f206e6f6e20455243373260448201527f31526563656976657220696d706c656d656e74657200000000000000000000006064820152608401610c9c565b6001600160a01b0382166121265760405162461bcd60e51b815260206004820152602360248201527f4c6f636b49644e46543a206d696e7420746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610c9c565b6000818152600b60205260409020546001600160a01b03161561218b5760405162461bcd60e51b815260206004820152601f60248201527f4c6f636b49644e46543a20746f6b656e20616c7265616479206d696e746564006044820152606401610c9c565b6000818152600b60209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038716908117909155808452600d90925280832080546001019055518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b61221d57506001610f11565b600061229e63150b7a0260e01b338887876040516024016122419493929190612d0e565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060358152602001612d7a603591396001600160a01b03881691906122d5565b90506000818060200190518101906122b69190612d40565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b6060610f11848460008585600080866001600160a01b031685876040516122fc9190612d5d565b60006040518083038185875af1925050503d8060008114612339576040519150601f19603f3d011682016040523d82523d6000602084013e61233e565b606091505b509150915061234f8783838761235a565b979650505050505050565b606083156123c95782516000036123c2576001600160a01b0385163b6123c25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c9c565b5081610f11565b610f1183838151156123de5781518083602001fd5b8060405162461bcd60e51b8152600401610c9c91906124dc565b6001600160e01b03198116811461240e57600080fd5b50565b60006020828403121561242357600080fd5b81356116a7816123f8565b80356001600160a01b03811681146115f357600080fd5b803563ffffffff811681146115f357600080fd5b6000806040838503121561246c57600080fd5b6124758361242e565b915061248360208401612445565b90509250929050565b60005b838110156124a757818101518382015260200161248f565b50506000910152565b600081518084526124c881602086016020860161248c565b601f01601f19169290920160200192915050565b6020815260006116a760208301846124b0565b60006020828403121561250157600080fd5b5035919050565b6000806040838503121561251b57600080fd5b6125248361242e565b946020939093013593505050565b60008060006060848603121561254757600080fd5b6125508461242e565b925061255e6020850161242e565b9150604084013590509250925092565b6000806040838503121561258157600080fd5b50508035926020909101359150565b600080604083850312156125a357600080fd5b8235915061248360208401612445565b6000602082840312156125c557600080fd5b6116a78261242e565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612607576126076125ce565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612636576126366125ce565b604052919050565b60006080828403121561265057600080fd5b6040516080810181811067ffffffffffffffff82111715612673576126736125ce565b8060405250809150823581526020830135602082015261269560408401612445565b60408201526126a660608401612445565b60608201525092915050565b60008060a083850312156126c557600080fd5b6126cf848461263e565b946080939093013593505050565b6020808252825182820181905260009190848201906040850190845b81811015612715578351835292840192918401916001016126f9565b50909695505050505050565b6000806040838503121561273457600080fd5b61273d8361242e565b915060208084013567ffffffffffffffff8082111561275b57600080fd5b818601915086601f83011261276f57600080fd5b813581811115612781576127816125ce565b61278f848260051b0161260d565b818152848101925060a09182028401850191898311156127ae57600080fd5b938501935b828510156127f65780858b0312156127cb5760008081fd5b6127d36125e4565b853581526127e38b88880161263e565b81880152845293840193928501926127b3565b5080955050505050509250929050565b600067ffffffffffffffff831115612820576128206125ce565b612833601f8401601f191660200161260d565b905082815283838301111561284757600080fd5b828260208301376000602084830101529392505050565b600082601f83011261286f57600080fd5b6116a783833560208501612806565b600080600080600060a0868803121561289657600080fd5b853567ffffffffffffffff808211156128ae57600080fd5b6128ba89838a0161285e565b965060208801359150808211156128d057600080fd5b506128dd8882890161285e565b9450506128ec6040870161242e565b94979396509394606081013594506080013592915050565b6000806040838503121561291757600080fd5b6129208361242e565b91506020830135801515811461293557600080fd5b809150509250929050565b60006020828403121561295257600080fd5b6116a782612445565b60808101610a9482848051825260208101516020830152604081015163ffffffff808216604085015280606084015116606085015250505050565b600080600080608085870312156129ac57600080fd5b6129b58561242e565b93506129c36020860161242e565b925060408501359150606085013567ffffffffffffffff8111156129e657600080fd5b8501601f810187136129f757600080fd5b612a0687823560208401612806565b91505092959194509250565b6020808252825182820181905260009190848201906040850190845b8181101561271557612a6e8385518051825260208101516020830152604081015163ffffffff808216604085015280606084015116606085015250505050565b9284019260809290920191600101612a2e565b60008060408385031215612a9457600080fd5b612a9d8361242e565b91506124836020840161242e565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610a9457610a94612ac1565b600060018201612afc57612afc612ac1565b5060010190565b600181811c90821680612b1757607f821691505b602082108103612b3757634e487b7160e01b600052602260045260246000fd5b50919050565b81810381811115610a9457610a94612ac1565b80820260008212600160ff1b84141615612b6c57612b6c612ac1565b8181058314821517610a9457610a94612ac1565b8181036000831280158383131683831282161715612ba057612ba0612ac1565b5092915050565b600082612bc457634e487b7160e01b600052601260045260246000fd5b500490565b601f82111561056757600081815260208120601f850160051c81016020861015612bf05750805b601f850160051c820191505b81811015612c0f57828155600101612bfc565b505050505050565b815167ffffffffffffffff811115612c3157612c316125ce565b612c4581612c3f8454612b03565b84612bc9565b602080601f831160018114612c7a5760008415612c625750858301515b600019600386901b1c1916600185901b178555612c0f565b600085815260208120601f198616915b82811015612ca957888601518255948401946001909101908401612c8a565b5085821015612cc75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082028115828204841417610a9457610a94612ac1565b8082018281126000831280158216821582161715610a9157610a91612ac1565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261138960808301846124b0565b600060208284031215612d5257600080fd5b81516116a7816123f8565b60008251612d6f81846020870161248c565b919091019291505056fe4c6f636b49644e46543a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572a164736f6c6343000812000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104215760003560e01c80638462151c11610235578063b94419e011610135578063e178ee20116100c8578063f3ae241511610097578063f88d1fef1161007c578063f88d1fef14610a01578063f975d9f314610a09578063fd2dcecf14610a1c57600080fd5b8063f3ae2415146109ce578063f6631718146109e157600080fd5b8063e178ee2014610964578063e985e9c514610977578063edc3bc3f1461098d578063f0329f6b146109bb57600080fd5b8063cea823cd11610104578063cea823cd14610923578063d28d885214610946578063de6961801461094e578063dece68541461095657600080fd5b8063b94419e0146108bc578063ba209fcf146108cf578063c87b56dd146108ef578063cdc4717c1461091057600080fd5b8063a7cc0136116101c8578063b01ac59111610197578063b2bdfa7b1161017c578063b2bdfa7b1461086c578063b88d4fde1461087f578063b911135f1461089357600080fd5b8063b01ac59114610856578063b09f12661461086457600080fd5b8063a7cc0136146107f2578063a898e9fa1461081b578063aa5965ae14610823578063aa88652b1461083657600080fd5b8063a22cb46511610204578063a22cb46514610791578063a2e9b4391461079f578063a36c36e5146107bf578063a7263665146107d257600080fd5b80638462151c1461074157806388290adc1461075457806394a509dd1461077b57806395d89b411461078957600080fd5b80633e47a4b1116103405780636352211e116102d357806370a08231116102a2578063743976a011610287578063743976a0146106fd5780637482313214610705578063796db3121461071857600080fd5b806370a08231146106d7578063743500ad146106ea57600080fd5b80636352211e1461068257806363a8fd89146106955780636c0360eb146106ba5780636ff97f1d146106c257600080fd5b80634f6ccce71161030f5780634f6ccce71461061057806350d2a27614610623578063550d01a31461064c5780635896f5281461066f57600080fd5b80633e47a4b1146105d957806342842e0e14610559578063481c6a75146105ec5780634f3c5f06146105fd57600080fd5b806317a3a79c116103b857806328f02c681161038757806328f02c681461056c5780632f745c59146105ab57806334067c3c146105be578063366c0ae7146105c657600080fd5b806317a3a79c1461051357806318160ddd1461054857806322e67e711461055057806323b872dd1461055957600080fd5b8063081812fc116103f4578063081812fc146104ad578063095ea7b3146104d95780630bb78ec1146104ed57806310c113601461050057600080fd5b806301ffc9a7146104265780630346759314610468578063059f8b161461048957806306fdde0314610498575b600080fd5b610453610434366004612411565b6001600160e01b03191660009081526004602052604090205460ff1690565b60405190151581526020015b60405180910390f35b61047b610476366004612459565b610a25565b60405190815260200161045f565b61047b670de0b6b3a764000081565b6104a0610a9a565b60405161045f91906124dc565b6104c16104bb3660046124ef565b50600090565b6040516001600160a01b03909116815260200161045f565b6104eb6104e7366004612508565b5050565b005b6104a06104fb3660046124ef565b610b2c565b61047b61050e3660046124ef565b610bc6565b6105366105213660046124ef565b60096020526000908152604090205460ff1681565b60405160ff909116815260200161045f565b60115461047b565b61047b60155481565b6104eb610567366004612532565b505050565b61057f61057a36600461256e565b610be7565b60408051948552602085019390935263ffffffff9182169284019290925216606082015260800161045f565b61047b6105b9366004612508565b610c3b565b61047b610ce2565b61047b6105d4366004612590565b610d25565b61047b6105e73660046125b3565b610d6c565b6005546001600160a01b03166104c1565b61047b61060b366004612508565b610ddd565b61047b61061e3660046124ef565b610e0e565b6104c1610631366004612411565b6003602052600090815260409020546001600160a01b031681565b61045361065a3660046125b3565b60026020526000908152604090205460ff1681565b61047b61067d3660046126b2565b610e9a565b6104c16106903660046124ef565b610f19565b6000546104539074010000000000000000000000000000000000000000900460ff1681565b6104a0610fa4565b6106ca610fb3565b60405161045f91906126dd565b61047b6106e53660046125b3565b61100a565b6104eb6106f8366004612721565b6110a4565b6104a0611205565b6104eb61071336600461287e565b611212565b6104c16107263660046124ef565b600b602052600090815260409020546001600160a01b031681565b6106ca61074f3660046125b3565b6112a8565b610762630a85bd0160e11b81565b6040516001600160e01b0319909116815260200161045f565b610762635b5e139f60e01b81565b6104a0611314565b6104eb6104e7366004612904565b61047b6107ad3660046124ef565b60106020526000908152604090205481565b61047b6107cd366004612940565b611323565b61047b6107e03660046124ef565b60126020526000908152604090205481565b6104c16108003660046124ef565b600c602052600090815260409020546001600160a01b031681565b6106ca611393565b61047b6108313660046124ef565b6113e9565b6108496108443660046124ef565b6113f9565b60405161045f919061295b565b61076263780e9d6360e01b81565b6104a06115f8565b6000546104c1906001600160a01b031681565b6104eb61088d366004612996565b50505050565b6104c16108a13660046124ef565b6001602052600090815260409020546001600160a01b031681565b61047b6108ca3660046124ef565b611605565b6108e26108dd3660046124ef565b6116ae565b60405161045f9190612a12565b6104a06108fd3660046124ef565b5060408051602081019091526000815290565b61047b61091e3660046124ef565b611752565b6104536109313660046124ef565b60196020526000908152604090205460ff1681565b6104a0611776565b61047b611783565b6107626380ac58cd60e01b81565b61057f61097236600461256e565b611796565b610453610985366004612a81565b600092915050565b61045361099b366004612a81565b600e60209081526000928352604080842090915290825290205460ff1681565b6005546104c1906001600160a01b031681565b6104536109dc3660046125b3565b6117b2565b61047b6109ef3660046125b3565b600d6020526000908152604090205481565b6108496117da565b6108e2610a173660046124ef565b611809565b61047b60145481565b600080610a31846112a8565b90508051600003610a46576000915050610a94565b60005b8151811015610a9157610a75828281518110610a6757610a67612aab565b602002602001015185610d25565b610a7f9084612ad7565b9250610a8a81612aea565b9050610a49565b50505b92915050565b606060068054610aa990612b03565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad590612b03565b8015610b225780601f10610af757610100808354040283529160200191610b22565b820191906000526020600020905b815481529060010190602001808311610b0557829003601f168201915b5050505050905090565b60086020526000908152604090208054610b4590612b03565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7190612b03565b8015610bbe5780601f10610b9357610100808354040283529160200191610bbe565b820191906000526020600020905b815481529060010190602001808311610ba157829003601f168201915b505050505081565b60188181548110610bd657600080fd5b600091825260209091200154905081565b60176020528160005260406000208181548110610c0357600080fd5b600091825260209091206003909102018054600182015460029092015490935090915063ffffffff8082169164010000000090041684565b6000610c468361100a565b8210610ca55760405162461bcd60e51b8152602060048201526024808201527f4c6f636b49644e46543a206f776e657220696e646578206f7574206f6620626f604482015263756e647360e01b60648201526084015b60405180910390fd5b6001600160a01b0383166000908152600f60205260409020805483908110610ccf57610ccf612aab565b9060005260206000200154905092915050565b6018546000908103610cf45750600090565b60188054610d0490600190612b3d565b81548110610d1457610d14612aab565b90600052602060002001545b905090565b600082815260166020526040812081908190610d419085611898565b915091508115610d6057610d5b818563ffffffff16610e9a565b610d63565b60005b95945050505050565b600080610d78836112a8565b90508051600003610d8c5750600092915050565b60005b8151811015610dd657610dba828281518110610dad57610dad612aab565b6020026020010151611605565b610dc49084612ad7565b9250610dcf81612aea565b9050610d8f565b5050919050565b600f6020528160005260406000208181548110610df957600080fd5b90600052602060002001600091509150505481565b6000610e1960115490565b8210610e755760405162461bcd60e51b815260206004820152602560248201527f4c6f636b49644e46543a20676c6f62616c20696e646578206f7574206f6620626044820152646f756e647360d81b6064820152608401610c9c565b60118281548110610e8857610e88612aab565b90600052602060002001549050919050565b6000826060015163ffffffff16821015610eb657506000610a94565b6000836040015163ffffffff1683610ece9190612b3d565b8451610eda9190612b50565b9050670de0b6b3a764000081856020015113610ef7576000610f07565b818560200151610f079190612b80565b610f119190612ba7565b949350505050565b6000818152600b60205260408120546001600160a01b031680610a945760405162461bcd60e51b815260206004820152602c60248201527f4c6f636b49644e46543a206f776e657220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610c9c565b6060600a8054610aa990612b03565b60606011805480602002602001604051908101604052809291908181526020018280548015610b2257602002820191906000526020600020905b815481526020019060010190808311610fed575050505050905090565b60006001600160a01b0382166110885760405162461bcd60e51b815260206004820152602d60248201527f4c6f636b49644e46543a2062616c616e636520717565727920666f722074686560448201527f207a65726f2061646472657373000000000000000000000000000000000000006064820152608401610c9c565b506001600160a01b03166000908152600d602052604090205490565b6005546001600160a01b031633146110fe5760405162461bcd60e51b815260206004820152600b60248201527f6e6f74206d616e616765720000000000000000000000000000000000000000006044820152606401610c9c565b80516000036111395760405162461bcd60e51b81526020600482015260076024820152666e6f206461746160c81b6044820152606401610c9c565b60005b81518110156105675761118382828151811061115a5761115a612aab565b6020026020010151600001516000908152600b60205260409020546001600160a01b0316151590565b6111ae576111ae8383838151811061119d5761119d612aab565b602002602001015160000151611a12565b6111f3838383815181106111c4576111c4612aab565b6020026020010151600001518484815181106111e2576111e2612aab565b602002602001015160200151611a2c565b806111fd81612aea565b91505061113c565b600a8054610b4590612b03565b6000546001600160a01b031633146112585760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b6044820152606401610c9c565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038516179055600661128c8682612c17565b5060076112998582612c17565b50601491909155601555505050565b6001600160a01b0381166000908152600f602090815260409182902080548351818402810184019094528084526060939283018282801561130857602002820191906000526020600020905b8154815260200190600101908083116112f4575b50505050509050919050565b606060078054610aa990612b03565b60008060006113378463ffffffff16611e6b565b915091508161134a575060009392505050565b600081815260176020526040812081906113649087611898565b91509150816113795750600095945050505050565b611389818763ffffffff16610e9a565b9695505050505050565b60606018805480602002602001604051908101604052809291908181526020018280548015610b225760200282019190600052602060002090815481526020019060010190808311610fed575050505050905090565b60118181548110610bd657600080fd5b60408051608081018252600080825260208201819052918101829052606081019190915281156115ca57600082815260176020908152604080832080548251818502810185019093528083529192909190849084015b828210156114b35760008481526020908190206040805160808101825260038602909201805483526001808201548486015260029091015463ffffffff8082169385019390935264010000000090049091166060830152908352909201910161144f565b505050509050805160001461159f57604051806080016040528082600184516114dc9190612b3d565b815181106114ec576114ec612aab565b6020026020010151600001518152602001826001845161150c9190612b3d565b8151811061151c5761151c612aab565b6020026020010151602001518152602001826001845161153c9190612b3d565b8151811061154c5761154c612aab565b60200260200101516040015163ffffffff16815260200182600184516115729190612b3d565b8151811061158257611582612aab565b60200260200101516060015163ffffffff16815250915050919050565b5050604080516080810182526000808252602082018190529181018290526060810191909152919050565b505060408051608081018252600080825260208201819052918101829052606081019190915290565b919050565b60078054610b4590612b03565b60008181526016602052604081205480156116a457600083815260166020526040902061169f90611637600184612b3d565b8154811061164757611647612aab565b60009182526020918290206040805160808101825260039093029091018054835260018101549383019390935260029092015463ffffffff808216938301939093526401000000009004909116606082015242610e9a565b6116a7565b60005b9392505050565b606060166000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156117475760008481526020908190206040805160808101825260038602909201805483526001808201548486015260029091015463ffffffff808216938501939093526401000000009004909116606083015290835290920191016116e3565b505050509050919050565b6014546000906117628180612ba7565b61176c9190612cd7565b610a949083612ad7565b60068054610b4590612b03565b6000610d206117906117da565b42610e9a565b60166020528160005260406000208181548110610c0357600080fd5b6005546000906001600160a01b038084169116036117d257506001919050565b506000919050565b604080516080810182526000808252602082018190529181018290526060810191909152610d20610844610ce2565b60008181526017602090815260408083208054825181850281018501909352808352606094929391929091840182156117475760008481526020908190206040805160808101825260038602909201805483526001808201548486015260029091015463ffffffff808216938501939093526401000000009004909116606083015290835290920191016116e3565b604080516080810182526000808252602082018190529181018290526060810182905283546000036118cd5760009150611a0b565b83546000905b806118df836001612ad7565b101561195157600060026118f38385612ad7565b6118fd9190612ba7565b90508563ffffffff1687828154811061191857611918612aab565b6000918252602090912060039091020160020154640100000000900463ffffffff16116119475780925061194b565b8091505b506118d3565b8463ffffffff1686838154811061196a5761196a612aab565b6000918252602090912060039091020160020154640100000000900463ffffffff1611611a045760018683815481106119a5576119a5612aab565b60009182526020918290206040805160808101825260039093029091018054835260018101549383019390935260029092015463ffffffff80821693830193909352640100000000900490911660608201529094509250611a0b915050565b6000935050505b9250929050565b6104e7828260405180602001604052806000815250611f74565b60135460ff161515600103611a6c5760405162461bcd60e51b8152602060048201526006602482015265696e2075736560d01b6044820152606401610c9c565b6013805460ff19166001179055600082815260166020908152604080832054815160808101835284815292830184905290820183905260608201929092526040805160808101825284518152602080860151908201528482015163ffffffff908116928201929092524290911660608201528215611b66576000858152601660205260409020611afd600185612b3d565b81548110611b0d57611b0d612aab565b60009182526020918290206040805160808101825260039093029091018054835260018101549383019390935260029092015463ffffffff80821693830193909352640100000000900490911660608201529150611b9a565b60405180608001604052806000815260200160008152602001600063ffffffff168152602001600063ffffffff1681525091505b6000604051806080016040528084600001518460000151611bbb9190612b80565b815260200184602001518460200151611bd49190612b80565b815260408088015163ffffffff908116602080850191909152428083169484019490945260008b8152601682528381208054600181810183559183528383208a5160039092020190815592890151908301559287015160029091018054606089015184166401000000000267ffffffffffffffff199091169290931691909117919091179055919250611c6690611752565b60008181526017602090815260408083205481516080810183528481529283018490529082018390526060820183905292935090829003611cb057611ca96117da565b9050611d2e565b6000838152601760205260409020611cc9600184612b3d565b81548110611cd957611cd9612aab565b60009182526020918290206040805160808101825260039093029091018054835260018101549383019390935260029092015463ffffffff808216938301939093526401000000009004909116606082015290505b6000604051806080016040528086600001518460000151611d4f9190612cee565b815260200186602001518460200151611d689190612cee565b81526040808c015163ffffffff90811660208085019190915242821693830193909352600088815260178452828120805460018181018355918352858320875160039092020190815586860151918101919091558584015160029091018054606088015185166401000000000267ffffffffffffffff19909116929094169190911792909217909155878152601990925290205490915060ff16611e54576000848152601960205260408120805460ff191660019081179091556018805491820181559091527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e018490555b50506013805460ff19169055505050505050505050565b6018546014546000918291829080611e838188612ad7565b611e8d9190612cd7565b611e979190612ba7565b905081600003611eae575060009485945092505050565b6000825b80611ebe836001612ad7565b1015611f145760006002611ed28385612ad7565b611edc9190612ba7565b90508360188281548110611ef257611ef2612aab565b906000526020600020015411611f0a57809250611f0e565b8091505b50611eb2565b8260188381548110611f2857611f28612aab565b906000526020600020015411611f6557600160188381548110611f4d57611f4d612aab565b90600052602060002001549550955050505050915091565b50600096879650945050505050565b81600003611fc45760405162461bcd60e51b815260206004820152601360248201527f6e6f7420616c6c6f77656420746f6b656e4964000000000000000000000000006044820152606401610c9c565b611fce83836120c4565b6001600160a01b0383166000908152600f6020908152604080832080548685526010845282852081905560018082018355918552838520018690556011805487865260129094529184208390558201815582527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680183905561205290848484612204565b6105675760405162461bcd60e51b815260206004820152603560248201527f4c6f636b49644e46543a207472616e7366657220746f206e6f6e20455243373260448201527f31526563656976657220696d706c656d656e74657200000000000000000000006064820152608401610c9c565b6001600160a01b0382166121265760405162461bcd60e51b815260206004820152602360248201527f4c6f636b49644e46543a206d696e7420746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610c9c565b6000818152600b60205260409020546001600160a01b03161561218b5760405162461bcd60e51b815260206004820152601f60248201527f4c6f636b49644e46543a20746f6b656e20616c7265616479206d696e746564006044820152606401610c9c565b6000818152600b60209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038716908117909155808452600d90925280832080546001019055518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b61221d57506001610f11565b600061229e63150b7a0260e01b338887876040516024016122419493929190612d0e565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060358152602001612d7a603591396001600160a01b03881691906122d5565b90506000818060200190518101906122b69190612d40565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b6060610f11848460008585600080866001600160a01b031685876040516122fc9190612d5d565b60006040518083038185875af1925050503d8060008114612339576040519150601f19603f3d011682016040523d82523d6000602084013e61233e565b606091505b509150915061234f8783838761235a565b979650505050505050565b606083156123c95782516000036123c2576001600160a01b0385163b6123c25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c9c565b5081610f11565b610f1183838151156123de5781518083602001fd5b8060405162461bcd60e51b8152600401610c9c91906124dc565b6001600160e01b03198116811461240e57600080fd5b50565b60006020828403121561242357600080fd5b81356116a7816123f8565b80356001600160a01b03811681146115f357600080fd5b803563ffffffff811681146115f357600080fd5b6000806040838503121561246c57600080fd5b6124758361242e565b915061248360208401612445565b90509250929050565b60005b838110156124a757818101518382015260200161248f565b50506000910152565b600081518084526124c881602086016020860161248c565b601f01601f19169290920160200192915050565b6020815260006116a760208301846124b0565b60006020828403121561250157600080fd5b5035919050565b6000806040838503121561251b57600080fd5b6125248361242e565b946020939093013593505050565b60008060006060848603121561254757600080fd5b6125508461242e565b925061255e6020850161242e565b9150604084013590509250925092565b6000806040838503121561258157600080fd5b50508035926020909101359150565b600080604083850312156125a357600080fd5b8235915061248360208401612445565b6000602082840312156125c557600080fd5b6116a78261242e565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612607576126076125ce565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612636576126366125ce565b604052919050565b60006080828403121561265057600080fd5b6040516080810181811067ffffffffffffffff82111715612673576126736125ce565b8060405250809150823581526020830135602082015261269560408401612445565b60408201526126a660608401612445565b60608201525092915050565b60008060a083850312156126c557600080fd5b6126cf848461263e565b946080939093013593505050565b6020808252825182820181905260009190848201906040850190845b81811015612715578351835292840192918401916001016126f9565b50909695505050505050565b6000806040838503121561273457600080fd5b61273d8361242e565b915060208084013567ffffffffffffffff8082111561275b57600080fd5b818601915086601f83011261276f57600080fd5b813581811115612781576127816125ce565b61278f848260051b0161260d565b818152848101925060a09182028401850191898311156127ae57600080fd5b938501935b828510156127f65780858b0312156127cb5760008081fd5b6127d36125e4565b853581526127e38b88880161263e565b81880152845293840193928501926127b3565b5080955050505050509250929050565b600067ffffffffffffffff831115612820576128206125ce565b612833601f8401601f191660200161260d565b905082815283838301111561284757600080fd5b828260208301376000602084830101529392505050565b600082601f83011261286f57600080fd5b6116a783833560208501612806565b600080600080600060a0868803121561289657600080fd5b853567ffffffffffffffff808211156128ae57600080fd5b6128ba89838a0161285e565b965060208801359150808211156128d057600080fd5b506128dd8882890161285e565b9450506128ec6040870161242e565b94979396509394606081013594506080013592915050565b6000806040838503121561291757600080fd5b6129208361242e565b91506020830135801515811461293557600080fd5b809150509250929050565b60006020828403121561295257600080fd5b6116a782612445565b60808101610a9482848051825260208101516020830152604081015163ffffffff808216604085015280606084015116606085015250505050565b600080600080608085870312156129ac57600080fd5b6129b58561242e565b93506129c36020860161242e565b925060408501359150606085013567ffffffffffffffff8111156129e657600080fd5b8501601f810187136129f757600080fd5b612a0687823560208401612806565b91505092959194509250565b6020808252825182820181905260009190848201906040850190845b8181101561271557612a6e8385518051825260208101516020830152604081015163ffffffff808216604085015280606084015116606085015250505050565b9284019260809290920191600101612a2e565b60008060408385031215612a9457600080fd5b612a9d8361242e565b91506124836020840161242e565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610a9457610a94612ac1565b600060018201612afc57612afc612ac1565b5060010190565b600181811c90821680612b1757607f821691505b602082108103612b3757634e487b7160e01b600052602260045260246000fd5b50919050565b81810381811115610a9457610a94612ac1565b80820260008212600160ff1b84141615612b6c57612b6c612ac1565b8181058314821517610a9457610a94612ac1565b8181036000831280158383131683831282161715612ba057612ba0612ac1565b5092915050565b600082612bc457634e487b7160e01b600052601260045260246000fd5b500490565b601f82111561056757600081815260208120601f850160051c81016020861015612bf05750805b601f850160051c820191505b81811015612c0f57828155600101612bfc565b505050505050565b815167ffffffffffffffff811115612c3157612c316125ce565b612c4581612c3f8454612b03565b84612bc9565b602080601f831160018114612c7a5760008415612c625750858301515b600019600386901b1c1916600185901b178555612c0f565b600085815260208120601f198616915b82811015612ca957888601518255948401946001909101908401612c8a565b5085821015612cc75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082028115828204841417610a9457610a94612ac1565b8082018281126000831280158216821582161715610a9157610a91612ac1565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261138960808301846124b0565b600060208284031215612d5257600080fd5b81516116a7816123f8565b60008251612d6f81846020870161248c565b919091019291505056fe4c6f636b49644e46543a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572a164736f6c6343000812000a",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenByIndex(uint256)": {
        "details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "totalSupply()": {
        "details": "Returns the total amount of tokens stored by the contract."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOfLock(address)": {
        "notice": "특정 계정이 소유한 stos를 가져옴."
      },
      "balanceOfLock(uint256)": {
        "notice": "특정 락아이디의 현재 시간의 stos"
      },
      "balanceOfLockAt(uint256,uint32)": {
        "notice": "특정 락아이디의 현재 시간의 stos"
      },
      "lastPointOfTimeIndex(uint256)": {
        "notice": "해당 타임의 가장 최신 포인트"
      },
      "pointHistoryOfTimeIndex(uint256)": {
        "notice": "특정 타임인덱스의 전체 포인트 리스트"
      },
      "pointOfLastTimeIndex()": {
        "notice": "가장 최근의 포인트"
      },
      "totalSupplyLocks()": {
        "notice": "현재 시간의 총 stos"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1707,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1709,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "pauseProxy",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1713,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "proxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1717,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "aliveImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1721,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "selectorImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 1736,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 3378,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "_manager",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3380,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "_name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 3382,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "_symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 3386,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3390,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "_tokenAttributes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint8)"
      },
      {
        "astId": 3392,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "_baseURI",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 3396,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "_tokenOwner",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3400,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3404,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "_ownedTokensCount",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3410,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3415,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3419,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3422,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "_allTokens",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3426,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3428,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "_lock",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 3477,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "epochUnit",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 3479,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "maxTime",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 3485,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "pointHistoryByLockId",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_array(t_struct(SyncInfo)1691_storage)dyn_storage)"
      },
      {
        "astId": 3491,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "pointHistoryByWeek",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_array(t_struct(SyncInfo)1691_storage)dyn_storage)"
      },
      {
        "astId": 3494,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "indexOfTimeset",
        "offset": 0,
        "slot": "24",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3498,
        "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
        "label": "indexCheckOfTimeset",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(SyncInfo)1691_storage)dyn_storage": {
        "base": "t_struct(SyncInfo)1691_storage",
        "encoding": "dynamic_array",
        "label": "struct LibLockId.SyncInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(SyncInfo)1691_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibLockId.SyncInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(SyncInfo)1691_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SyncInfo)1691_storage": {
        "encoding": "inplace",
        "label": "struct LibLockId.SyncInfo",
        "members": [
          {
            "astId": 1684,
            "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
            "label": "slope",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 1686,
            "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
            "label": "bias",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 1688,
            "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1690,
            "contract": "contracts/stos/LockIdNftForRegister.sol:LockIdNftForRegister",
            "label": "syncTime",
            "offset": 4,
            "slot": "2",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}