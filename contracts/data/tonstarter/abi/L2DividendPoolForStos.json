{
  "address": "0x310AeC1C6Ab68DD1DB4bf9B885835BD73BdEb958",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wekklyEpoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Distributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldEpoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POLICY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aliveImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokensPerWeek",
          "type": "uint256"
        }
      ],
      "name": "calculateClaimPerEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "claimBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "claimUpTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "distributedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "distributions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalDistribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "genesis",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAvailableClaims",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "claimableAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getCurrentWeeklyEpochTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getWeeklyEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_universalStos",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_epochUnit",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_weeklyEpoch",
          "type": "uint256"
        }
      ],
      "name": "redistribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selectorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "tokensPerWeekAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "universalStos",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb5bdcc8761e284e025b37a49be566193e0d28f3186fd79faa1a4a17951f720f0",
  "receipt": {
    "to": null,
    "from": "0xc1eba383D94c6021160042491A5dfaF1d82694E6",
    "contractAddress": "0x310AeC1C6Ab68DD1DB4bf9B885835BD73BdEb958",
    "transactionIndex": 0,
    "gasUsed": "1906222",
    "logsBloom": "0x
    "blockHash": "0x705be095e9cebc3dffef9c08c3a4530a4f50a684a30c202e31dab7af0a8032dd",
    "transactionHash": "0xb5bdcc8761e284e025b37a49be566193e0d28f3186fd79faa1a4a17951f720f0",
    "logs": [],
    "blockNumber": 23689,
    "cumulativeGasUsed": "1906222",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b43c6570b3b1b6f48b8dc9da694ef9ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wekklyEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLICY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensPerWeek\",\"type\":\"uint256\"}],\"name\":\"calculateClaimPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claimBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"claimUpTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"distributions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalDistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"genesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAvailableClaims\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimableAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getCurrentWeeklyEpochTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getWeeklyEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_universalStos\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochUnit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weeklyEpoch\",\"type\":\"uint256\"}],\"name\":\"redistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"tokensPerWeekAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"universalStos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"add admin\",\"params\":{\"account\":\"address to add\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAdmin(address)\":{\"details\":\"whether admin\",\"params\":{\"account\":\"address to check\"}},\"removeAdmin(address)\":{\"details\":\"remove admin\",\"params\":{\"account\":\"address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferAdmin(address)\":{\"details\":\"transfer admin\",\"params\":{\"newAdmin\":\"new admin address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L2/airdrop/L2DividendPoolForStos.sol\":\"L2DividendPoolForStos\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/L2/airdrop/L2DividendPoolForStos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../proxy/ProxyStorage.sol\\\";\\nimport { AccessibleCommon } from \\\"../../common/AccessibleCommon.sol\\\";\\nimport { L2DividendPoolForStosStorage } from \\\"./L2DividendPoolForStosStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../../libraries/LibDividend.sol\\\";\\n\\nimport {IERC20} from \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../../libraries/SafeERC20.sol\\\";\\n\\ninterface IUniversalStos {\\n\\n    function balanceOfAt(address account, uint256 _timestamp) external view returns (uint256);\\n    function totalSupplyAt(uint256 _timestamp) external view returns (uint256);\\n\\n}\\n\\ncontract L2DividendPoolForStos is ProxyStorage, AccessibleCommon, L2DividendPoolForStosStorage {\\n    using SafeERC20 for IERC20;\\n\\n    event Claimed(address indexed token, address indexed account, uint256 amount, uint256 epochNumber, uint256 timestamp);\\n    event Distributed(address indexed token, uint256 wekklyEpoch, uint256 amount);\\n    event Redistributed(address indexed token, uint256 oldEpoch, uint256 newEpoch, uint256 amount);\\n\\n    modifier ifFree {\\n        require(!free, \\\"already in use\\\");\\n        free = true;\\n        _;\\n        free = false;\\n    }\\n\\n    modifier nonZero(uint256 value) {\\n        require(value != 0, \\\"zero value\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroAddress(address addr) {\\n        require(addr != address(0), \\\"zero address\\\");\\n        _;\\n    }\\n\\n    /* ========== onlyOwner ========== */\\n\\n    function initialize(address _universalStos, uint256 _epochUnit) external onlyOwner {\\n        universalStos = _universalStos;\\n        epochUnit = _epochUnit;\\n    }\\n\\n    /* ========== external  ========== */\\n\\n    function claimBatch(address[] calldata _tokens) external {\\n        for (uint i = 0; i < _tokens.length; ++i) {\\n            claim(_tokens[i]);\\n        }\\n    }\\n\\n    function claim(address _token) public {\\n        claimUpTo(_token, block.timestamp - epochUnit);\\n    }\\n\\n    function claimUpTo(address _token, uint256 _timestamp) public {\\n        require(genesis[_token] != 0, \\\"genesis is zero\\\");\\n        require(block.timestamp >= genesis[_token] + epochUnit, \\\"the first epoch\\\");\\n        uint256 timestamp = Math.min(_timestamp, block.timestamp - epochUnit);\\n        uint256 weeklyEpoch = getWeeklyEpoch(_token, timestamp);\\n\\n        uint256 amountToClaim = claimableForEpoches(\\n                _token,\\n                msg.sender,\\n                claimStartWeeklyEpoch[_token][msg.sender],\\n                weeklyEpoch);\\n\\n        require(amountToClaim > 0, \\\"no claimable amlount\\\");\\n        LibDividend.Distribution storage distr = distributions[_token];\\n        require(distr.lastBalance >= amountToClaim, \\\"insufficient balance\\\");\\n        claimStartWeeklyEpoch[_token][msg.sender] = weeklyEpoch + 1;\\n        distr.lastBalance -= amountToClaim;\\n\\n        IERC20(_token).safeTransfer(msg.sender, amountToClaim);\\n        emit Claimed(_token, msg.sender, amountToClaim, weeklyEpoch, _timestamp);\\n    }\\n\\n    function _recordClaim(\\n        address _token,\\n        address account,\\n        uint256 _weeklyEpoch\\n    ) internal returns (uint256 amountToClaim) {\\n\\n        amountToClaim = claimableForEpoches(\\n            _token,\\n            account,\\n            claimStartWeeklyEpoch[_token][account],\\n            _weeklyEpoch\\n        );\\n\\n        require(amountToClaim > 0, \\\"Amount to be claimed is zero\\\");\\n        LibDividend.Distribution storage distr = distributions[_token];\\n        require(distr.lastBalance >= amountToClaim, \\\"insufficient remained balance\\\");\\n\\n        claimStartWeeklyEpoch[_token][account] = _weeklyEpoch + 1;\\n        distr.lastBalance -= amountToClaim;\\n    }\\n\\n\\n    function distribute(address _token, uint256 _amount)\\n        external nonZero(_amount) nonZeroAddress(_token) ifFree\\n    {\\n        if (genesis[_token] == 0) genesis[_token] = block.timestamp / epochUnit * epochUnit;\\n        uint256 weeklyEpoch = getWeeklyEpoch(_token, block.timestamp);\\n\\n        LibDividend.Distribution storage distr = distributions[_token];\\n        if (distr.exists == false) distributedTokens.push(_token);\\n        distr.exists = true;\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        distr.lastBalance = IERC20(_token).balanceOf(address(this));\\n        distr.totalDistribution += _amount;\\n        tokensPerWeek[_token][weeklyEpoch] += _amount;\\n\\n        emit Distributed(_token, weeklyEpoch, _amount);\\n    }\\n\\n    // \\uc774\\uc804\\uc5d0 \\uc774\\ubbf8 \\ubc30\\ud3ec\\ud588\\ub294\\ub370, \\ud574\\ub2f9 \\uc2a4\\ub0c5\\uc0f7 \\uc2dc\\uc810\\uc5d0 \\ucd1d \\uae08\\uc561\\uc774 \\uc5c6\\uc5b4\\uc11c \\uc5d0\\uc5b4\\ub4dc\\ub78d \\ubc1b\\uc744 \\uc0ac\\ub78c\\uc774 \\uc5c6\\ub294\\uacbd\\uc6b0,..\\n    // \\ud574\\ub2f9 \\uc5d0\\ud3ed\\uc758 \\uae08\\uc561\\uc744 \\ud604\\uc7ac \\uc5d0\\ud3ed\\uc73c\\ub85c \\uac00\\uc838\\uc62c \\uc218 \\uc788\\uac8c \\ud55c\\ub2e4.\\n    function redistribute(address _token, uint256 _weeklyEpoch)\\n        external nonZeroAddress(_token) ifFree\\n    {\\n        uint256 currentEpoch = getWeeklyEpoch(_token, block.timestamp);\\n        require(_weeklyEpoch < currentEpoch, \\\"It can only be set if it is the last epoch.\\\");\\n        uint256 timestamp = genesis[_token] + (_weeklyEpoch * epochUnit) +  epochUnit;\\n\\n        require(\\n            IUniversalStos(universalStos).totalSupplyAt(timestamp) == 0,\\n            \\\"Token exists for that epoch\\\"\\n        );\\n\\n        uint256 amount = tokensPerWeek[_token][_weeklyEpoch];\\n        tokensPerWeek[_token][currentEpoch] += amount;\\n        tokensPerWeek[_token][_weeklyEpoch] = 0;\\n\\n        emit Redistributed(_token, _weeklyEpoch, currentEpoch, amount);\\n    }\\n\\n\\n    function tokensPerWeekAt(address _token, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256 epochNumber, uint256 amount)\\n    {\\n        uint256 weeklyEpoch = getWeeklyEpoch(_token, _timestamp);\\n        return (weeklyEpoch, tokensPerWeek[_token][weeklyEpoch]);\\n    }\\n\\n    /* ========== public  ========== */\\n\\n    function getWeeklyEpoch(address _token, uint256 _timestamp)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 stime = genesis[_token];\\n        if (stime == 0) return 0;\\n        return _timestamp > stime ? (_timestamp - stime) / epochUnit : 0;\\n    }\\n\\n    function getAvailableClaims(address _account)\\n        external view returns (address[] memory tokens, uint256[] memory claimableAmounts)\\n    {\\n        uint256[] memory amounts = new uint256[](distributedTokens.length);\\n\\n        for (uint256 i = 0; i < distributedTokens.length; ++i) {\\n            amounts[i] = claimable(_account, distributedTokens[i]);\\n        }\\n\\n        return (distributedTokens, amounts);\\n    }\\n\\n    function claimable(address _account, address _token) public view returns (uint256) {\\n\\n        uint256 stime = genesis[_token];\\n        if (stime == 0) return 0;\\n\\n        uint256 endEpoch = getWeeklyEpoch(_token, block.timestamp - epochUnit);\\n        uint256 startEpoch = claimStartWeeklyEpoch[_token][_account];\\n        return claimableForEpoches(_account, _token, startEpoch, endEpoch);\\n    }\\n\\n\\n    function calculateClaimPerEpoch(\\n        address _account,\\n        uint256 _timestamp,\\n        uint256 _tokensPerWeek\\n    ) public view returns (uint256) {\\n        uint256 balance = IUniversalStos(universalStos).balanceOfAt(_account, _timestamp);\\n        uint256 supply = IUniversalStos(universalStos).totalSupplyAt(_timestamp);\\n        if (balance == 0 || supply == 0) return 0;\\n        return (_tokensPerWeek * balance / supply);\\n    }\\n\\n    function getCurrentWeeklyEpochTimestamp(address _token) public view returns (uint256) {\\n        uint256 stime = genesis[_token];\\n        if (stime == 0) return 0;\\n\\n        uint256 weeklyEpoch = getWeeklyEpoch(_token, block.timestamp);\\n        return (stime + (weeklyEpoch * epochUnit) + epochUnit);\\n    }\\n\\n    /* ========== internal  ========== */\\n\\n    function claimableForEpoches(\\n        address _token,\\n        address _account,\\n        uint256 startEpoch,\\n        uint256 endEpoch\\n    ) internal view returns (uint256 amountToClaim) {\\n        if (startEpoch > endEpoch) return 0;\\n        uint256 stime = genesis[_token];\\n        uint256 epochIterator = startEpoch;\\n        while (startEpoch <= endEpoch) {\\n            if (tokensPerWeek[_token][epochIterator] != 0 && stime != 0) {\\n                amountToClaim += calculateClaimPerEpoch(\\n                    _account,\\n                    stime + (epochIterator * epochUnit) + epochUnit,\\n                    tokensPerWeek[_token][epochIterator]);\\n            }\\n            epochIterator++;\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xcb626f5de83d2c9a72cdab19bd85842590d4e4b6da04fc2cf353495fb5eb32a0\",\"license\":\"MIT\"},\"contracts/L2/airdrop/L2DividendPoolForStosStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../libraries/LibDividend.sol\\\";\\n\\n/**\\n * @title L2DividendPoolForStosStorage\\n * @dev\\n */\\ncontract L2DividendPoolForStosStorage {\\n\\n    address public universalStos;\\n    uint256 public epochUnit;\\n\\n    // token - start airdrop time  , it must be set at thursdat at 9 o'clock\\n    mapping(address => uint256) public genesis;\\n\\n    // token - Distribution\\n    mapping(address => LibDividend.Distribution) public distributions;\\n\\n    // token - epoch number - distributed amount\\n    mapping (address => mapping(uint256 => uint256)) tokensPerWeek;\\n\\n    // token - account - start epoch number\\n    mapping (address => mapping (address => uint256)) claimStartWeeklyEpoch;\\n\\n    // tokens\\n    address[] public distributedTokens;\\n    bool internal free;\\n}\",\"keccak256\":\"0xe232147b7658236fbfd4a44f20e6f2d08b6d8475a29e7ca7b3b5849b78534057\",\"license\":\"MIT\"},\"contracts/common/AccessRoleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AccessRoleCommon {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant POLICY_ROLE = keccak256(\\\"POLICY_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xd33c0944095da18c41a9434b86d34de8ce9c3667b57072c6b8b0567d406c814a\",\"license\":\"MIT\"},\"contracts/common/AccessibleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AccessRoleCommon.sol\\\";\\n\\ncontract AccessibleCommon is AccessRoleCommon, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"Accessible: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) external virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(ADMIN_ROLE, newAdmin);\\n        renounceRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(ADMIN_ROLE, account);\\n    }\\n}\\n\",\"keccak256\":\"0x846f0a4ecf6c7598f710d256c400f5fd47f23ce38df5ff9fe1fed41104568613\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function mint(address account, uint256 amount) external returns (bool);\\n\\n    function burn(address account, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x4dfcbed37adf9f54e4544d13382814f51c9ef5d52ca4277d2080f988857f3b23\",\"license\":\"MIT\"},\"contracts/libraries/LibDividend.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title LibDividend\\n */\\nlibrary LibDividend {\\n\\n    struct Distribution {\\n        bool exists;\\n        uint256 totalDistribution;\\n        uint256 lastBalance;\\n    }\\n}\",\"keccak256\":\"0x364cd6f9febe39baf893427d192e924c4d1f6f4c23fa0acac57e4f3b71c31f72\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x778abe92595c692abcf3bec8b72f4491746626d1a057c76b97c8d1a7d759f7b0\",\"license\":\"AGPL-3.0-only\"},\"contracts/proxy/ProxyStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage  {\\n\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n}\",\"keccak256\":\"0x0c29ab2e9f114400a3825c2a0ed8c0594cbf19e0322b7465140b61f5b5de6d96\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061218d806100206000396000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c806375b238fc1161012a578063cd6dc687116100bd578063e1de599b1161008c578063efb93e9611610071578063efb93e96146105ab578063fb932108146105be578063fd2dcecf146105d157600080fd5b8063e1de599b14610585578063e3ba18a51461059857600080fd5b8063cd6dc68714610539578063d4570c1c1461054c578063d4abe7171461055f578063d547741f1461057257600080fd5b80639353b9df116100f95780639353b9df146104a5578063a217fddf146104f5578063b911135f146104fd578063c83d3c471461052657600080fd5b806375b238fc146103fd57806377222509146104245780637b7eb2e21461044457806391d148541461046c57600080fd5b8063324fb13b116101bd578063550d01a31161018c57806363a8fd891161017157806363a8fd89146103ca57806370480275146103d757806375829def146103ea57600080fd5b8063550d01a31461038657806362e40c24146103a957600080fd5b8063324fb13b1461030c57806336568abe1461031f57806337a155031461033257806350d2a2761461035d57600080fd5b8063248a9ca3116101f9578063248a9ca3146102b057806324d7806c146102d35780632f2ff15d146102e6578063324cd9b1146102f957600080fd5b806301ffc9a71461022b5780631785f53c146102535780631e83409a14610268578063229852461461027b575b600080fd5b61023e610239366004611d5a565b6105da565b60405190151581526020015b60405180910390f35b610266610261366004611da0565b610611565b005b610266610276366004611da0565b6106a3565b6102a27ffb5864e8ff833c3cb2d2d08505e82ff02a43554c74a35d4f5a64e8526127831181565b60405190815260200161024a565b6102a26102be366004611dbb565b60009081526004602052604090206001015490565b61023e6102e1366004611da0565b6106b5565b6102666102f4366004611dd4565b6106f5565b6102a2610307366004611e00565b61071f565b6102a261031a366004611e2a565b610776565b61026661032d366004611dd4565b6108a0565b610345610340366004611dbb565b61092c565b6040516001600160a01b03909116815260200161024a565b61034561036b366004611d5a565b6003602052600090815260409020546001600160a01b031681565b61023e610394366004611da0565b60026020526000908152604090205460ff1681565b6103bc6103b7366004611da0565b610956565b60405161024a929190611e5d565b60005461023e9060ff1681565b6102666103e5366004611da0565b610a7a565b6102666103f8366004611da0565b610b04565b6102a27fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b6102a2610432366004611da0565b60076020526000908152604090205481565b610457610452366004611e00565b610c66565b6040805192835260208301919091520161024a565b61023e61047a366004611dd4565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6104d86104b3366004611da0565b60086020526000908152604090208054600182015460029092015460ff909116919083565b60408051931515845260208401929092529082015260600161024a565b6102a2600081565b61034561050b366004611dbb565b6001602052600090815260409020546001600160a01b031681565b600554610345906001600160a01b031681565b610266610547366004611e00565b610ca4565b6102a261055a366004611ee1565b610d37565b61026661056d366004611f0b565b610db4565b610266610580366004611dd4565b610df9565b610266610593366004611e00565b610e1e565b6102666105a6366004611e00565b6110e9565b6102a26105b9366004611da0565b611395565b6102666105cc366004611e00565b6113ee565b6102a260065481565b60006001600160e01b03198216637965db0b60e01b148061060b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61061a336106b5565b6106765760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084015b60405180910390fd5b6106a07fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42826108a0565b50565b6106a081600654426105a69190611f96565b6001600160a01b03811660009081527f2fb794d17134dfdec181ddbac1babb5ab1eb140204ef4d982f294e7fc8b69022602052604081205460ff1661060b565b600082815260046020526040902060010154610710816116c3565b61071a83836116cd565b505050565b6001600160a01b03821660009081526007602052604081205480820361074957600091505061060b565b80831161075757600061076e565b6006546107648285611f96565b61076e9190611fa9565b949350505050565b60055460405163277166bf60e11b81526001600160a01b038581166004830152602482018590526000928392911690634ee2cd7e90604401602060405180830381865afa1580156107cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ef9190611fcb565b600554604051630981b24d60e41b8152600481018790529192506000916001600160a01b039091169063981b24d090602401602060405180830381865afa15801561083e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108629190611fcb565b905081158061086f575080155b1561087f57600092505050610899565b8061088a8386611fe4565b6108949190611fa9565b925050505b9392505050565b6001600160a01b038116331461091e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161066d565b610928828261176f565b5050565b600b818154811061093c57600080fd5b6000918252602090912001546001600160a01b0316905081565b6060806000600b8054905067ffffffffffffffff81111561097957610979611ffb565b6040519080825280602002602001820160405280156109a2578160200160208202803683370190505b50905060005b600b54811015610a10576109e385600b83815481106109c9576109c9612011565b6000918252602090912001546001600160a01b0316610d37565b8282815181106109f5576109f5612011565b6020908102919091010152610a0981612027565b90506109a8565b50600b8181805480602002602001604051908101604052809291908181526020018280548015610a6957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a4b575b505050505091509250925050915091565b610a83336106b5565b610ada5760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b606482015260840161066d565b6106a07fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42826106f5565b610b0d336106b5565b610b645760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b606482015260840161066d565b6001600160a01b038116610bba5760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f20616464726573730000000000000000604482015260640161066d565b6001600160a01b0381163303610c125760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e00000000000000000000604482015260640161066d565b610c3c7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42826106f5565b6106a07fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42336108a0565b6000806000610c75858561071f565b6001600160a01b0395909516600090815260096020908152604080832088845290915290205494959350505050565b610cad336106b5565b610d045760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b606482015260840161066d565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039390931692909217909155600655565b6001600160a01b038116600090815260076020526040812054808203610d6157600091505061060b565b6000610d7584600654426103079190611f96565b6001600160a01b038086166000908152600a60209081526040808320938a1683529290522054909150610daa868683856117f2565b9695505050505050565b60005b8181101561071a57610de9838383818110610dd457610dd4612011565b90506020020160208101906102769190611da0565b610df281612027565b9050610db7565b600082815260046020526040902060010154610e14816116c3565b61071a838361176f565b816001600160a01b038116610e645760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b604482015260640161066d565b600c5460ff1615610ea85760405162461bcd60e51b815260206004820152600e60248201526d616c726561647920696e2075736560901b604482015260640161066d565b600c805460ff191660011790556000610ec1844261071f565b9050808310610f385760405162461bcd60e51b815260206004820152602b60248201527f49742063616e206f6e6c7920626520736574206966206974206973207468652060448201527f6c6173742065706f63682e000000000000000000000000000000000000000000606482015260840161066d565b600654600090610f488186611fe4565b6001600160a01b038716600090815260076020526040902054610f6b9190612040565b610f759190612040565b600554604051630981b24d60e41b8152600481018390529192506001600160a01b03169063981b24d090602401602060405180830381865afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe39190611fcb565b156110305760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e2065786973747320666f7220746861742065706f63680000000000604482015260640161066d565b6001600160a01b03851660009081526009602090815260408083208784529091528082205484835290822080549192839261106c908490612040565b90915550506001600160a01b038616600081815260096020908152604080832089845282528083209290925581518881529081018690529081018390527f1cb7f4652f6aadb7311647870434938dd368ea922f1c0a01b8cfad68df3e6975906060015b60405180910390a25050600c805460ff1916905550505050565b6001600160a01b03821660009081526007602052604081205490036111505760405162461bcd60e51b815260206004820152600f60248201527f67656e65736973206973207a65726f0000000000000000000000000000000000604482015260640161066d565b6006546001600160a01b0383166000908152600760205260409020546111769190612040565b4210156111c55760405162461bcd60e51b815260206004820152600f60248201527f7468652066697273742065706f63680000000000000000000000000000000000604482015260640161066d565b60006111de82600654426111d99190611f96565b6118d5565b905060006111ec848361071f565b6001600160a01b0385166000908152600a602090815260408083203380855292528220549293509091611221918791856117f2565b9050600081116112735760405162461bcd60e51b815260206004820152601460248201527f6e6f20636c61696d61626c6520616d6c6f756e74000000000000000000000000604482015260640161066d565b6001600160a01b038516600090815260086020526040902060028101548211156112df5760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e6365000000000000000000000000604482015260640161066d565b6112ea836001612040565b6001600160a01b0387166000908152600a60209081526040808320338452909152812091909155600282018054849290611325908490611f96565b9091555061133f90506001600160a01b03871633846118eb565b604080518381526020810185905290810186905233906001600160a01b038816907fd795915374024be1f03204e052bd584b33bb85c9128ede9c54adbe0bbdc220959060600160405180910390a3505050505050565b6001600160a01b0381166000908152600760205260408120548082036113be5750600092915050565b60006113ca844261071f565b6006549091506113da8183611fe4565b6113e49084612040565b61076e9190612040565b808060000361142c5760405162461bcd60e51b815260206004820152600a6024820152697a65726f2076616c756560b01b604482015260640161066d565b826001600160a01b0381166114725760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b604482015260640161066d565b600c5460ff16156114b65760405162461bcd60e51b815260206004820152600e60248201526d616c726561647920696e2075736560901b604482015260640161066d565b600c805460ff191660011790556001600160a01b0384166000908152600760205260408120549003611513576006546114ef8142611fa9565b6114f99190611fe4565b6001600160a01b0385166000908152600760205260409020555b600061151f854261071f565b6001600160a01b038616600090815260086020526040812080549293509160ff16151590036115a157600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0388161790555b805460ff191660011781556115c16001600160a01b038716333088611a06565b6040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa158015611605573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116299190611fcb565b8160020181905550848160010160008282546116459190612040565b90915550506001600160a01b03861660009081526009602090815260408083208584529091528120805487929061167d908490612040565b909155505060408051838152602081018790526001600160a01b038816917f60ce3cc2d133631eac66a476f14997a9fa682bd05a60dd993cf02285822d78d891016110cf565b6106a08133611b2a565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff166109285760008281526004602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561172b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16156109285760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000818311156118045750600061076e565b6001600160a01b038516600090815260076020526040902054835b8385116118cb576001600160a01b03871660009081526009602090815260408083208484529091529020541580159061185757508115155b156118b9576006546118ac90879061186f8185611fe4565b6118799086612040565b6118839190612040565b6001600160a01b038a166000908152600960209081526040808320878452909152902054610776565b6118b69084612040565b92505b806118c381612027565b91505061181f565b5050949350505050565b60008183106118e45781610899565b5090919050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916119479190612077565b6000604051808303816000865af19150503d8060008114611984576040519150601f19603f3d011682016040523d82523d6000602084013e611989565b606091505b50915091508180156119b35750805115806119b35750808060200190518101906119b39190612093565b6119ff5760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015260640161066d565b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691611a6a9190612077565b6000604051808303816000865af19150503d8060008114611aa7576040519150601f19603f3d011682016040523d82523d6000602084013e611aac565b606091505b5091509150818015611ad6575080511580611ad6575080806020019051810190611ad69190612093565b611b225760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015260640161066d565b505050505050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff1661092857611b5d81611b9f565b611b68836020611bb1565b604051602001611b799291906120b5565b60408051601f198184030181529082905262461bcd60e51b825261066d91600401612136565b606061060b6001600160a01b03831660145b60606000611bc0836002611fe4565b611bcb906002612040565b67ffffffffffffffff811115611be357611be3611ffb565b6040519080825280601f01601f191660200182016040528015611c0d576020820181803683370190505b509050600360fc1b81600081518110611c2857611c28612011565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611c5757611c57612011565b60200101906001600160f81b031916908160001a9053506000611c7b846002611fe4565b611c86906001612040565b90505b6001811115611d0b577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611cc757611cc7612011565b1a60f81b828281518110611cdd57611cdd612011565b60200101906001600160f81b031916908160001a90535060049490941c93611d0481612169565b9050611c89565b5083156108995760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161066d565b600060208284031215611d6c57600080fd5b81356001600160e01b03198116811461089957600080fd5b80356001600160a01b0381168114611d9b57600080fd5b919050565b600060208284031215611db257600080fd5b61089982611d84565b600060208284031215611dcd57600080fd5b5035919050565b60008060408385031215611de757600080fd5b82359150611df760208401611d84565b90509250929050565b60008060408385031215611e1357600080fd5b611e1c83611d84565b946020939093013593505050565b600080600060608486031215611e3f57600080fd5b611e4884611d84565b95602085013595506040909401359392505050565b604080825283519082018190526000906020906060840190828701845b82811015611e9f5781516001600160a01b031684529284019290840190600101611e7a565b5050508381038285015284518082528583019183019060005b81811015611ed457835183529284019291840191600101611eb8565b5090979650505050505050565b60008060408385031215611ef457600080fd5b611efd83611d84565b9150611df760208401611d84565b60008060208385031215611f1e57600080fd5b823567ffffffffffffffff80821115611f3657600080fd5b818501915085601f830112611f4a57600080fd5b813581811115611f5957600080fd5b8660208260051b8501011115611f6e57600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561060b5761060b611f80565b600082611fc657634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611fdd57600080fd5b5051919050565b808202811582820484141761060b5761060b611f80565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006001820161203957612039611f80565b5060010190565b8082018082111561060b5761060b611f80565b60005b8381101561206e578181015183820152602001612056565b50506000910152565b60008251612089818460208701612053565b9190910192915050565b6000602082840312156120a557600080fd5b8151801515811461089957600080fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516120ed816017850160208801612053565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161212a816028840160208801612053565b01602801949350505050565b6020815260008251806020840152612155816040850160208701612053565b601f01601f19169190910160400192915050565b60008161217857612178611f80565b50600019019056fea164736f6c6343000812000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102265760003560e01c806375b238fc1161012a578063cd6dc687116100bd578063e1de599b1161008c578063efb93e9611610071578063efb93e96146105ab578063fb932108146105be578063fd2dcecf146105d157600080fd5b8063e1de599b14610585578063e3ba18a51461059857600080fd5b8063cd6dc68714610539578063d4570c1c1461054c578063d4abe7171461055f578063d547741f1461057257600080fd5b80639353b9df116100f95780639353b9df146104a5578063a217fddf146104f5578063b911135f146104fd578063c83d3c471461052657600080fd5b806375b238fc146103fd57806377222509146104245780637b7eb2e21461044457806391d148541461046c57600080fd5b8063324fb13b116101bd578063550d01a31161018c57806363a8fd891161017157806363a8fd89146103ca57806370480275146103d757806375829def146103ea57600080fd5b8063550d01a31461038657806362e40c24146103a957600080fd5b8063324fb13b1461030c57806336568abe1461031f57806337a155031461033257806350d2a2761461035d57600080fd5b8063248a9ca3116101f9578063248a9ca3146102b057806324d7806c146102d35780632f2ff15d146102e6578063324cd9b1146102f957600080fd5b806301ffc9a71461022b5780631785f53c146102535780631e83409a14610268578063229852461461027b575b600080fd5b61023e610239366004611d5a565b6105da565b60405190151581526020015b60405180910390f35b610266610261366004611da0565b610611565b005b610266610276366004611da0565b6106a3565b6102a27ffb5864e8ff833c3cb2d2d08505e82ff02a43554c74a35d4f5a64e8526127831181565b60405190815260200161024a565b6102a26102be366004611dbb565b60009081526004602052604090206001015490565b61023e6102e1366004611da0565b6106b5565b6102666102f4366004611dd4565b6106f5565b6102a2610307366004611e00565b61071f565b6102a261031a366004611e2a565b610776565b61026661032d366004611dd4565b6108a0565b610345610340366004611dbb565b61092c565b6040516001600160a01b03909116815260200161024a565b61034561036b366004611d5a565b6003602052600090815260409020546001600160a01b031681565b61023e610394366004611da0565b60026020526000908152604090205460ff1681565b6103bc6103b7366004611da0565b610956565b60405161024a929190611e5d565b60005461023e9060ff1681565b6102666103e5366004611da0565b610a7a565b6102666103f8366004611da0565b610b04565b6102a27fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b6102a2610432366004611da0565b60076020526000908152604090205481565b610457610452366004611e00565b610c66565b6040805192835260208301919091520161024a565b61023e61047a366004611dd4565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6104d86104b3366004611da0565b60086020526000908152604090208054600182015460029092015460ff909116919083565b60408051931515845260208401929092529082015260600161024a565b6102a2600081565b61034561050b366004611dbb565b6001602052600090815260409020546001600160a01b031681565b600554610345906001600160a01b031681565b610266610547366004611e00565b610ca4565b6102a261055a366004611ee1565b610d37565b61026661056d366004611f0b565b610db4565b610266610580366004611dd4565b610df9565b610266610593366004611e00565b610e1e565b6102666105a6366004611e00565b6110e9565b6102a26105b9366004611da0565b611395565b6102666105cc366004611e00565b6113ee565b6102a260065481565b60006001600160e01b03198216637965db0b60e01b148061060b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61061a336106b5565b6106765760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084015b60405180910390fd5b6106a07fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42826108a0565b50565b6106a081600654426105a69190611f96565b6001600160a01b03811660009081527f2fb794d17134dfdec181ddbac1babb5ab1eb140204ef4d982f294e7fc8b69022602052604081205460ff1661060b565b600082815260046020526040902060010154610710816116c3565b61071a83836116cd565b505050565b6001600160a01b03821660009081526007602052604081205480820361074957600091505061060b565b80831161075757600061076e565b6006546107648285611f96565b61076e9190611fa9565b949350505050565b60055460405163277166bf60e11b81526001600160a01b038581166004830152602482018590526000928392911690634ee2cd7e90604401602060405180830381865afa1580156107cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ef9190611fcb565b600554604051630981b24d60e41b8152600481018790529192506000916001600160a01b039091169063981b24d090602401602060405180830381865afa15801561083e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108629190611fcb565b905081158061086f575080155b1561087f57600092505050610899565b8061088a8386611fe4565b6108949190611fa9565b925050505b9392505050565b6001600160a01b038116331461091e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161066d565b610928828261176f565b5050565b600b818154811061093c57600080fd5b6000918252602090912001546001600160a01b0316905081565b6060806000600b8054905067ffffffffffffffff81111561097957610979611ffb565b6040519080825280602002602001820160405280156109a2578160200160208202803683370190505b50905060005b600b54811015610a10576109e385600b83815481106109c9576109c9612011565b6000918252602090912001546001600160a01b0316610d37565b8282815181106109f5576109f5612011565b6020908102919091010152610a0981612027565b90506109a8565b50600b8181805480602002602001604051908101604052809291908181526020018280548015610a6957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a4b575b505050505091509250925050915091565b610a83336106b5565b610ada5760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b606482015260840161066d565b6106a07fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42826106f5565b610b0d336106b5565b610b645760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b606482015260840161066d565b6001600160a01b038116610bba5760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f20616464726573730000000000000000604482015260640161066d565b6001600160a01b0381163303610c125760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e00000000000000000000604482015260640161066d565b610c3c7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42826106f5565b6106a07fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42336108a0565b6000806000610c75858561071f565b6001600160a01b0395909516600090815260096020908152604080832088845290915290205494959350505050565b610cad336106b5565b610d045760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b606482015260840161066d565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039390931692909217909155600655565b6001600160a01b038116600090815260076020526040812054808203610d6157600091505061060b565b6000610d7584600654426103079190611f96565b6001600160a01b038086166000908152600a60209081526040808320938a1683529290522054909150610daa868683856117f2565b9695505050505050565b60005b8181101561071a57610de9838383818110610dd457610dd4612011565b90506020020160208101906102769190611da0565b610df281612027565b9050610db7565b600082815260046020526040902060010154610e14816116c3565b61071a838361176f565b816001600160a01b038116610e645760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b604482015260640161066d565b600c5460ff1615610ea85760405162461bcd60e51b815260206004820152600e60248201526d616c726561647920696e2075736560901b604482015260640161066d565b600c805460ff191660011790556000610ec1844261071f565b9050808310610f385760405162461bcd60e51b815260206004820152602b60248201527f49742063616e206f6e6c7920626520736574206966206974206973207468652060448201527f6c6173742065706f63682e000000000000000000000000000000000000000000606482015260840161066d565b600654600090610f488186611fe4565b6001600160a01b038716600090815260076020526040902054610f6b9190612040565b610f759190612040565b600554604051630981b24d60e41b8152600481018390529192506001600160a01b03169063981b24d090602401602060405180830381865afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe39190611fcb565b156110305760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e2065786973747320666f7220746861742065706f63680000000000604482015260640161066d565b6001600160a01b03851660009081526009602090815260408083208784529091528082205484835290822080549192839261106c908490612040565b90915550506001600160a01b038616600081815260096020908152604080832089845282528083209290925581518881529081018690529081018390527f1cb7f4652f6aadb7311647870434938dd368ea922f1c0a01b8cfad68df3e6975906060015b60405180910390a25050600c805460ff1916905550505050565b6001600160a01b03821660009081526007602052604081205490036111505760405162461bcd60e51b815260206004820152600f60248201527f67656e65736973206973207a65726f0000000000000000000000000000000000604482015260640161066d565b6006546001600160a01b0383166000908152600760205260409020546111769190612040565b4210156111c55760405162461bcd60e51b815260206004820152600f60248201527f7468652066697273742065706f63680000000000000000000000000000000000604482015260640161066d565b60006111de82600654426111d99190611f96565b6118d5565b905060006111ec848361071f565b6001600160a01b0385166000908152600a602090815260408083203380855292528220549293509091611221918791856117f2565b9050600081116112735760405162461bcd60e51b815260206004820152601460248201527f6e6f20636c61696d61626c6520616d6c6f756e74000000000000000000000000604482015260640161066d565b6001600160a01b038516600090815260086020526040902060028101548211156112df5760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e6365000000000000000000000000604482015260640161066d565b6112ea836001612040565b6001600160a01b0387166000908152600a60209081526040808320338452909152812091909155600282018054849290611325908490611f96565b9091555061133f90506001600160a01b03871633846118eb565b604080518381526020810185905290810186905233906001600160a01b038816907fd795915374024be1f03204e052bd584b33bb85c9128ede9c54adbe0bbdc220959060600160405180910390a3505050505050565b6001600160a01b0381166000908152600760205260408120548082036113be5750600092915050565b60006113ca844261071f565b6006549091506113da8183611fe4565b6113e49084612040565b61076e9190612040565b808060000361142c5760405162461bcd60e51b815260206004820152600a6024820152697a65726f2076616c756560b01b604482015260640161066d565b826001600160a01b0381166114725760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b604482015260640161066d565b600c5460ff16156114b65760405162461bcd60e51b815260206004820152600e60248201526d616c726561647920696e2075736560901b604482015260640161066d565b600c805460ff191660011790556001600160a01b0384166000908152600760205260408120549003611513576006546114ef8142611fa9565b6114f99190611fe4565b6001600160a01b0385166000908152600760205260409020555b600061151f854261071f565b6001600160a01b038616600090815260086020526040812080549293509160ff16151590036115a157600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0388161790555b805460ff191660011781556115c16001600160a01b038716333088611a06565b6040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa158015611605573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116299190611fcb565b8160020181905550848160010160008282546116459190612040565b90915550506001600160a01b03861660009081526009602090815260408083208584529091528120805487929061167d908490612040565b909155505060408051838152602081018790526001600160a01b038816917f60ce3cc2d133631eac66a476f14997a9fa682bd05a60dd993cf02285822d78d891016110cf565b6106a08133611b2a565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff166109285760008281526004602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561172b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16156109285760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000818311156118045750600061076e565b6001600160a01b038516600090815260076020526040902054835b8385116118cb576001600160a01b03871660009081526009602090815260408083208484529091529020541580159061185757508115155b156118b9576006546118ac90879061186f8185611fe4565b6118799086612040565b6118839190612040565b6001600160a01b038a166000908152600960209081526040808320878452909152902054610776565b6118b69084612040565b92505b806118c381612027565b91505061181f565b5050949350505050565b60008183106118e45781610899565b5090919050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916119479190612077565b6000604051808303816000865af19150503d8060008114611984576040519150601f19603f3d011682016040523d82523d6000602084013e611989565b606091505b50915091508180156119b35750805115806119b35750808060200190518101906119b39190612093565b6119ff5760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015260640161066d565b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691611a6a9190612077565b6000604051808303816000865af19150503d8060008114611aa7576040519150601f19603f3d011682016040523d82523d6000602084013e611aac565b606091505b5091509150818015611ad6575080511580611ad6575080806020019051810190611ad69190612093565b611b225760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015260640161066d565b505050505050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff1661092857611b5d81611b9f565b611b68836020611bb1565b604051602001611b799291906120b5565b60408051601f198184030181529082905262461bcd60e51b825261066d91600401612136565b606061060b6001600160a01b03831660145b60606000611bc0836002611fe4565b611bcb906002612040565b67ffffffffffffffff811115611be357611be3611ffb565b6040519080825280601f01601f191660200182016040528015611c0d576020820181803683370190505b509050600360fc1b81600081518110611c2857611c28612011565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611c5757611c57612011565b60200101906001600160f81b031916908160001a9053506000611c7b846002611fe4565b611c86906001612040565b90505b6001811115611d0b577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611cc757611cc7612011565b1a60f81b828281518110611cdd57611cdd612011565b60200101906001600160f81b031916908160001a90535060049490941c93611d0481612169565b9050611c89565b5083156108995760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161066d565b600060208284031215611d6c57600080fd5b81356001600160e01b03198116811461089957600080fd5b80356001600160a01b0381168114611d9b57600080fd5b919050565b600060208284031215611db257600080fd5b61089982611d84565b600060208284031215611dcd57600080fd5b5035919050565b60008060408385031215611de757600080fd5b82359150611df760208401611d84565b90509250929050565b60008060408385031215611e1357600080fd5b611e1c83611d84565b946020939093013593505050565b600080600060608486031215611e3f57600080fd5b611e4884611d84565b95602085013595506040909401359392505050565b604080825283519082018190526000906020906060840190828701845b82811015611e9f5781516001600160a01b031684529284019290840190600101611e7a565b5050508381038285015284518082528583019183019060005b81811015611ed457835183529284019291840191600101611eb8565b5090979650505050505050565b60008060408385031215611ef457600080fd5b611efd83611d84565b9150611df760208401611d84565b60008060208385031215611f1e57600080fd5b823567ffffffffffffffff80821115611f3657600080fd5b818501915085601f830112611f4a57600080fd5b813581811115611f5957600080fd5b8660208260051b8501011115611f6e57600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561060b5761060b611f80565b600082611fc657634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611fdd57600080fd5b5051919050565b808202811582820484141761060b5761060b611f80565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006001820161203957612039611f80565b5060010190565b8082018082111561060b5761060b611f80565b60005b8381101561206e578181015183820152602001612056565b50506000910152565b60008251612089818460208701612053565b9190910192915050565b6000602082840312156120a557600080fd5b8151801515811461089957600080fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516120ed816017850160208801612053565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161212a816028840160208801612053565b01602801949350505050565b6020815260008251806020840152612155816040850160208701612053565b601f01601f19169190910160400192915050565b60008161217857612178611f80565b50600019019056fea164736f6c6343000812000a",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "details": "add admin",
        "params": {
          "account": "address to add"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAdmin(address)": {
        "details": "whether admin",
        "params": {
          "account": "address to check"
        }
      },
      "removeAdmin(address)": {
        "details": "remove admin",
        "params": {
          "account": "address to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferAdmin(address)": {
        "details": "transfer admin",
        "params": {
          "newAdmin": "new admin address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5155,
        "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
        "label": "pauseProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5159,
        "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
        "label": "proxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5163,
        "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
        "label": "aliveImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5167,
        "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
        "label": "selectorImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 24,
        "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2708,
        "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
        "label": "universalStos",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2710,
        "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
        "label": "epochUnit",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2714,
        "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
        "label": "genesis",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2719,
        "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
        "label": "distributions",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Distribution)4108_storage)"
      },
      {
        "astId": 2725,
        "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
        "label": "tokensPerWeek",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2731,
        "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
        "label": "claimStartWeeklyEpoch",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2734,
        "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
        "label": "distributedTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2736,
        "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
        "label": "free",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Distribution)4108_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibDividend.Distribution)",
        "numberOfBytes": "32",
        "value": "t_struct(Distribution)4108_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Distribution)4108_storage": {
        "encoding": "inplace",
        "label": "struct LibDividend.Distribution",
        "members": [
          {
            "astId": 4103,
            "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4105,
            "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
            "label": "totalDistribution",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4107,
            "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
            "label": "lastBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/L2/airdrop/L2DividendPoolForStos.sol:L2DividendPoolForStos",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}