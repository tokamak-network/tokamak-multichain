{
  "address": "0xB8Bc738947DB3Fc42f24Be7bC6eaf2Ad85a38602",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "IncreasedLiquidityInVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "InitialMintedInVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAllocatedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialTosPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialTokenPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "initSqrtPriceX96",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "InitializedInitialLiquidityVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "SetCreatedPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "inSqrtPriceX96",
          "type": "uint160"
        }
      ],
      "name": "SetPoolInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        }
      ],
      "name": "SetStartTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_npm",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_ton",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tos",
          "type": "address"
        }
      ],
      "name": "SetUniswapInfo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "SetVaultAdmin",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POLICY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWAP_PERIOD",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "_tick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "_tickSpacings",
          "type": "int24"
        }
      ],
      "name": "acceptMaxTick",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "_tick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "_tickSpacings",
          "type": "int24"
        }
      ],
      "name": "acceptMinTick",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptSlippagePrice",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptTickChangeInterval",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aliveImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "tickSpacings",
          "type": "int24"
        }
      ],
      "name": "getMaxTick",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "tickSpacings",
          "type": "int24"
        }
      ],
      "name": "getMiniTick",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "tick",
          "type": "int24"
        },
        {
          "internalType": "uint128",
          "name": "amountIn",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        }
      ],
      "name": "getQuoteAtTick",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "_fee",
          "type": "uint24"
        }
      ],
      "name": "getTickSpacing",
      "outputs": [
        {
          "internalType": "int24",
          "name": "tickSpacings",
          "type": "int24"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAllocatedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tosPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initSqrtPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "fee",
              "type": "uint16"
            }
          ],
          "internalType": "struct LibProject.InitalParameterInitialLiquidityVault",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isVaultAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2ProjectManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tosAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonfungiblePositionManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAllocatedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialTosPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialTokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpToken",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "internalType": "uint160",
          "name": "initSqrtPriceX96",
          "type": "uint160"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "bool",
          "name": "boolReadyToCreatePool",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selectorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "_value",
          "type": "int24"
        }
      ],
      "name": "setAcceptSlippagePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "_interval",
          "type": "int24"
        }
      ],
      "name": "setAcceptTickChangeInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        }
      ],
      "name": "setCreatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2ProjectManager",
          "type": "address"
        }
      ],
      "name": "setL2ProjectManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_startTime",
          "type": "uint32"
        }
      ],
      "name": "setStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "setTWAP_PERIOD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolfactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_npm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ton",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tos",
          "type": "address"
        }
      ],
      "name": "setUniswapInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "setVaultAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tickSpacings",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ton",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tos",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "transferVaultAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV3Factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultAdminOfToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        }
      ],
      "name": "viewVaultInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAllocatedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialTosPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialTokenPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpToken",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint160",
              "name": "initSqrtPriceX96",
              "type": "uint160"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "bool",
              "name": "boolReadyToCreatePool",
              "type": "bool"
            }
          ],
          "internalType": "struct LibInitialLiquidityVault.PoolInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x038c0fff5c44b8d4f5663bcdc7f4ee455fc8d6a2004444b0cc0e636f05ef8cba",
  "receipt": {
    "to": null,
    "from": "0xc1eba383D94c6021160042491A5dfaF1d82694E6",
    "contractAddress": "0xB8Bc738947DB3Fc42f24Be7bC6eaf2Ad85a38602",
    "transactionIndex": 0,
    "gasUsed": "4409421",
    "logsBloom": "0x
    "blockHash": "0x1c364aba036c5cc74f28577165580499f16a265e1e4718d31cce73b5632211fa",
    "transactionHash": "0x038c0fff5c44b8d4f5663bcdc7f4ee455fc8d6a2004444b0cc0e636f05ef8cba",
    "logs": [],
    "blockNumber": 22630,
    "cumulativeGasUsed": "4409421",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a3d458828a1932a50e4175124b65d2fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"IncreasedLiquidityInVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"InitialMintedInVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTosPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"initSqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"InitializedInitialLiquidityVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"SetCreatedPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"inSqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"SetPoolInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"}],\"name\":\"SetStartTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_npm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ton\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tos\",\"type\":\"address\"}],\"name\":\"SetUniswapInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetVaultAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLICY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWAP_PERIOD\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"_tick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"_tickSpacings\",\"type\":\"int24\"}],\"name\":\"acceptMaxTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"_tick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"_tickSpacings\",\"type\":\"int24\"}],\"name\":\"acceptMinTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptSlippagePrice\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptTickChangeInterval\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickSpacings\",\"type\":\"int24\"}],\"name\":\"getMaxTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickSpacings\",\"type\":\"int24\"}],\"name\":\"getMiniTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amountIn\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"getQuoteAtTick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"name\":\"getTickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"tickSpacings\",\"type\":\"int24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tosPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"internalType\":\"struct LibProject.InitalParameterInitialLiquidityVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isVaultAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ProjectManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tosAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonfungiblePositionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialTosPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpToken\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint160\",\"name\":\"initSqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"boolReadyToCreatePool\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"_value\",\"type\":\"int24\"}],\"name\":\"setAcceptSlippagePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"_interval\",\"type\":\"int24\"}],\"name\":\"setAcceptTickChangeInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"}],\"name\":\"setCreatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2ProjectManager\",\"type\":\"address\"}],\"name\":\"setL2ProjectManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_startTime\",\"type\":\"uint32\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"setTWAP_PERIOD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolfactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_npm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ton\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tos\",\"type\":\"address\"}],\"name\":\"setUniswapInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setVaultAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacings\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferVaultAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultAdminOfToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"}],\"name\":\"viewVaultInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialTosPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpToken\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint160\",\"name\":\"initSqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"boolReadyToCreatePool\",\"type\":\"bool\"}],\"internalType\":\"struct LibInitialLiquidityVault.PoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"add admin\",\"params\":{\"account\":\"address to add\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAdmin(address)\":{\"details\":\"whether admin\",\"params\":{\"account\":\"address to check\"}},\"removeAdmin(address)\":{\"details\":\"remove admin\",\"params\":{\"account\":\"address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferAdmin(address)\":{\"details\":\"transfer admin\",\"params\":{\"newAdmin\":\"new admin address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L2/vaults/L2InitialLiquidityVault.sol\":\"L2InitialLiquidityVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/L2/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/L2/interfaces/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\nimport './IPoolInitializer.sol';\\nimport './IERC721Permit.sol';\\nimport './IPeripheryPayments.sol';\\nimport './IPeripheryImmutableState.sol';\\nimport '../libraries/PoolAddress.sol';\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0x3357b065654abb7f4a9ebd184a260bc39efde2afa4e99dca2e72ffc28e9c2984\",\"license\":\"GPL-2.0-or-later\"},\"contracts/L2/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/L2/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"contracts/L2/interfaces/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\"},\"contracts/L2/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // Handle division by zero\\n        require(denominator > 0);\\n\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            // require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // 2022.0314.modified\\n        //uint256 twos = -denominator & denominator;\\n        //uint256 twos = denominator & (~denominator + 1);\\n        uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n\\n        unchecked {\\n            prod0 |= prod1 * twos;\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n\\n            uint256 inv = (3 * denominator) ^ 2;\\n\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n        }\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1cb334770aafba8747f54d6ec0766049ab5f2174025f97ec0ada5e99c665c73\",\"license\":\"MIT\"},\"contracts/L2/libraries/OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport '../libraries/FullMath.sol';\\nimport '../libraries/TickMath.sol';\\n\\ninterface IIIUniswapV3Pool {\\n\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n}\\n\\n/// @title Oracle library\\n/// @notice Provides functions to integrate with V3 pool oracle\\nlibrary OracleLibrary {\\n\\n    /// @notice Fetches time-weighted average tick using Uniswap V3 oracle\\n    /// @param pool Address of Uniswap V3 pool that we want to observe\\n    /// @param period Number of seconds in the past to start calculating time-weighted average\\n    /// @return timeWeightedAverageTick The time-weighted average tick from (block.timestamp - period) to block.timestamp\\n    function consult(address pool, uint32 period) internal view returns (int24 timeWeightedAverageTick) {\\n        require(period != 0, 'BP');\\n\\n        uint32[] memory secondAgos = new uint32[](2);\\n        secondAgos[0] = period;\\n        secondAgos[1] = 0;\\n\\n        (int56[] memory tickCumulatives, ) = IIIUniswapV3Pool(pool).observe(secondAgos);\\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n\\n        timeWeightedAverageTick = int24(tickCumulativesDelta / int56( int32(period) ));\\n\\n        // Always round to negative infinity\\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % int56( int32(period) ) != 0)) timeWeightedAverageTick--;\\n    }\\n\\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\\n    /// @param tick Tick value used to calculate the quote\\n    /// @param baseAmount Amount of token to be converted\\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n    function getQuoteAtTick(\\n        int24 tick,\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken\\n    ) internal pure returns (uint256 quoteAmount) {\\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\\n\\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\\n        if (sqrtRatioX96 <= type(uint128).max) {\\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\\n        } else {\\n            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb986c379a18fc7a2444056025228768d9cc18c34cda9e9d6f3cc7a5fc18df7dd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/L2/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xa598dd2fba360510c5a8f02f44423a4468e902df5857dbce3ca162a43a3a31ff;\\n    // DARIUS - POOL_INIT_CODE_HASH = 0xa598dd2fba360510c5a8f02f44423a4468e902df5857dbce3ca162a43a3a31ff;\\n    // mainnet(default) - POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address( uint160(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            ))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x47b7ee9999a5f2317ecdb1354dfcb6931af3b62aec8779c032b783982dcef8af\",\"license\":\"GPL-2.0-or-later\"},\"contracts/L2/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.4;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(int256(MAX_TICK)), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x390f1d53d74b4cf44f745728a035cbe4519f13e13ecf036628b42dc0623abb8c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/L2/vaults/L2CustomVaultBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { ProxyStorage } from \\\"../../proxy/ProxyStorage.sol\\\";\\nimport { AccessibleCommon } from \\\"../../common/AccessibleCommon.sol\\\";\\nimport { L2CustomVaultBaseStorage } from \\\"./L2CustomVaultBaseStorage.sol\\\";\\n\\nimport {IERC20} from \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../../libraries/SafeERC20.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title L2CustomVaultBase\\n * @dev\\n */\\ncontract L2CustomVaultBase is ProxyStorage, AccessibleCommon, L2CustomVaultBaseStorage {\\n     using SafeERC20 for IERC20;\\n\\n    /* ========== DEPENDENCIES ========== */\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    /* ========== onlyOwner ========== */\\n\\n    function setL2ProjectManager(address _l2ProjectManager)\\n        external nonZeroAddress(_l2ProjectManager) onlyOwner\\n    {\\n        require(l2ProjectManager != _l2ProjectManager, \\\"same\\\");\\n        l2ProjectManager = _l2ProjectManager;\\n    }\\n\\n    /* ========== only L2ProjectManager ========== */\\n\\n    function setVaultAdmin(\\n        address l2Token,\\n        address _newAdmin\\n    )\\n        external nonZeroAddress(l2Token) nonZeroAddress(_newAdmin) onlyL2ProjectManager\\n    {\\n        require(vaultAdminOfToken[l2Token] != _newAdmin, \\\"same\\\");\\n        vaultAdminOfToken[l2Token] = _newAdmin;\\n        emit SetVaultAdmin(l2Token, _newAdmin);\\n    }\\n\\n    /* ========== only VaultAdmin Of Token ========== */\\n\\n    function transferVaultAdmin(\\n        address l2Token,\\n        address _newAdmin\\n    )\\n        external nonZeroAddress(l2Token) nonZeroAddress(_newAdmin) onlyVaultAdminOfToken(l2Token)\\n    {\\n        require(vaultAdminOfToken[l2Token] != _newAdmin, \\\"same\\\");\\n        vaultAdminOfToken[l2Token] = _newAdmin;\\n        emit SetVaultAdmin(l2Token, _newAdmin);\\n    }\\n\\n    /* ========== Anyone can vault admin of token ========== */\\n\\n\\n\\n    /* ========== VIEW ========== */\\n\\n    function isVaultAdmin(address l2Token, address account) public view returns (bool) {\\n        return (account != address(0) && vaultAdminOfToken[l2Token] == account);\\n    }\\n\\n    /* === ======= internal ========== */\\n\\n}\",\"keccak256\":\"0xd6f7e5c17da652401fd3d3e66e26091267a058b5f284dbe8e8b30a68e4aa883c\",\"license\":\"MIT\"},\"contracts/L2/vaults/L2CustomVaultBaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"hardhat/console.sol\\\";\\n/**\\n * @title L2CustomVaultBaseStorage\\n * @dev\\n */\\ncontract L2CustomVaultBaseStorage {\\n\\n    bool internal free = true;\\n    address public l2ProjectManager;\\n\\n    // l2token - tokenOwner\\n    mapping(address => address) public vaultAdminOfToken;\\n\\n    event SetVaultAdmin(address l2Token, address newAdmin);\\n\\n    modifier onlyL2ProjectManager() {\\n        require(l2ProjectManager != address(0) && msg.sender == l2ProjectManager, \\\"caller is not l2ProjectManager\\\");\\n        _;\\n    }\\n\\n    modifier onlyVaultAdminOfToken(address l2token) {\\n        require(vaultAdminOfToken[l2token] != address(0) && msg.sender == vaultAdminOfToken[l2token],\\n        \\\"caller is not a vaultAdmin Of l2Token\\\");\\n        _;\\n    }\\n\\n    modifier onlyL2ProjectManagerOrVaultAdmin(address l2token) {\\n        require(msg.sender == l2ProjectManager ||\\n            (vaultAdminOfToken[l2token] != address(0) && msg.sender == vaultAdminOfToken[l2token]),\\n            \\\"caller is not a vaultAdmin or ProjectManager\\\");\\n        _;\\n    }\\n\\n    modifier nonZero(uint256 value) {\\n        require(value != 0, \\\"Z1\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroAddress(address account) {\\n        require(account != address(0), \\\"Z2\\\");\\n        _;\\n    }\\n\\n    modifier ifFree {\\n        require(free, \\\"lock\\\");\\n        free = false;\\n        _;\\n        free = true;\\n    }\\n\\n\\n}\",\"keccak256\":\"0xae89a60605db1239eb11e416113dbf441fa3c7959394259e6c49d4a675e292fe\",\"license\":\"MIT\"},\"contracts/L2/vaults/L2InitialLiquidityVault.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\nimport \\\"./L2CustomVaultBase.sol\\\";\\nimport \\\"./L2InitialLiquidityVaultStorage.sol\\\";\\n\\nimport \\\"../interfaces/INonfungiblePositionManager.sol\\\";\\n\\nimport '../../libraries/LibProject.sol';\\nimport {IERC20} from \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../../libraries/SafeERC20.sol\\\";\\n\\nimport \\\"../libraries/TickMath.sol\\\";\\nimport \\\"../libraries/OracleLibrary.sol\\\";\\nimport '../libraries/FullMath.sol';\\n\\ninterface IIUniswapV3Factory {\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n}\\n\\ninterface IIUniswapV3Pool {\\n\\n    function initialize(uint160 sqrtPriceX96) external;\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n\\n}\\n\\ncontract L2InitialLiquidityVault is L2CustomVaultBase, L2InitialLiquidityVaultStorage\\n{\\n    using SafeERC20 for IERC20;\\n    /* ========== DEPENDENCIES ========== */\\n\\n    modifier afterSetUniswap() {\\n        require(\\n            uniswapV3Factory != address(0)\\n            && nonfungiblePositionManager != address(0)\\n            && tos != address(0)\\n            ,\\n            \\\"Vault: before setUniswap\\\");\\n        _;\\n    }\\n\\n    modifier readyToCreatePool(address l2Token) {\\n        require(poolInfo[l2Token].boolReadyToCreatePool, \\\"Vault: not ready to CreatePool\\\");\\n        _;\\n    }\\n\\n    modifier beforeSetReadyToCreatePool(address l2Token) {\\n        require(!poolInfo[l2Token].boolReadyToCreatePool, \\\"Vault: already ready to CreatePool\\\");\\n        _;\\n    }\\n\\n    event SetUniswapInfo(address _factory, address _npm, address _ton, address _tos);\\n    event SetStartTime(address l2Token, uint32 startTime);\\n    event SetPoolInitialized(address l2Token, address pool, uint160 inSqrtPriceX96);\\n    event SetCreatedPool(address l2Token, address pool);\\n    event InitializedInitialLiquidityVault(\\n        address l2Token,\\n        uint256 totalAllocatedAmount,\\n        uint256 initialTosPrice,\\n        uint256 initialTokenPrice,\\n        uint32 startTime,\\n        uint160 initSqrtPriceX96,\\n        uint24 fee\\n    );\\n\\n    event IncreasedLiquidityInVault(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n\\n    event InitialMintedInVault(\\n        address l2Token,\\n        address pool,\\n        uint256 tokenId,\\n        uint128 liquidity,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    /* ========== onlyOwner ========== */\\n    function setUniswapInfo(address _poolfactory, address _npm, address _ton, address _tos)\\n        external\\n        onlyOwner nonZeroAddress(_poolfactory) nonZeroAddress(_npm) nonZeroAddress(_ton) nonZeroAddress(_tos)\\n    {\\n        require(_poolfactory != uniswapV3Factory ||  _npm != nonfungiblePositionManager ||\\n             ton != _ton || tos != _tos, \\\"same\\\");\\n\\n        uniswapV3Factory = _poolfactory;\\n        nonfungiblePositionManager = _npm;\\n        ton = _ton;\\n        tos = _tos;\\n\\n        emit SetUniswapInfo(_poolfactory, _npm, _ton, _tos);\\n    }\\n\\n    function setAcceptTickChangeInterval(int24 _interval) external onlyOwner\\n    {\\n        require(_interval > 0, \\\"zero\\\");\\n        require(acceptTickChangeInterval != _interval, \\\"same\\\");\\n        acceptTickChangeInterval = _interval;\\n    }\\n\\n    function setAcceptSlippagePrice(int24 _value) external onlyOwner\\n    {\\n        require(_value > 0, \\\"zero\\\");\\n        require(acceptSlippagePrice != _value, \\\"same\\\");\\n        acceptSlippagePrice = _value;\\n    }\\n\\n    function setTWAP_PERIOD(uint32 value) external onlyOwner\\n    {\\n        require(value > 0, \\\"zero\\\");\\n        require(TWAP_PERIOD != value, \\\"same\\\");\\n        TWAP_PERIOD = value;\\n    }\\n\\n\\n    /* ========== only L2ProjectManager ========== */\\n    function initialize(\\n        address l2Token,\\n        LibProject.InitalParameterInitialLiquidityVault memory params\\n    )\\n        external onlyL2ProjectManagerOrVaultAdmin(l2Token) afterSetUniswap\\n    {\\n        // console.log('L2InitialLiquidityVault initialize in %s',l2Token  );\\n        require(poolInfo[l2Token].totalAllocatedAmount == 0, \\\"already initialized\\\");\\n        require(params.totalAllocatedAmount != 0 && params.tosPrice != 0 && params.tokenPrice != 0 && params.initSqrtPrice != 0 && params.fee != 0,\\n            \\\"zero totalAllocatedAmount or tosPrice or tokenPrice or initSqrtPriceX96 or startTime\\\");\\n        require(params.startTime > uint32(block.timestamp), \\\"StartTime has passed\\\");\\n\\n        // console.log('initialize iparams.totalAllocatedAmount %s', params.totalAllocatedAmount);\\n        // uint256 balanceToken = IERC20(l2Token).balanceOf(address(this));\\n        // console.log('initialize l2Token %s', l2Token);\\n        // console.log('initialize balanceToken %s', balanceToken);\\n\\n        // uint256 allowance = IERC20(l2Token).allowance(l2ProjectManager, address(this));\\n        // console.log('initialize allowance %s', allowance);\\n        IERC20(l2Token).safeTransferFrom(l2ProjectManager, address(this), params.totalAllocatedAmount);\\n        // console.log('initialize safeTransferFrom ');\\n\\n        LibInitialLiquidityVault.PoolInfo storage info = poolInfo[l2Token];\\n        info.totalAllocatedAmount = params.totalAllocatedAmount;\\n        info.initialTosPrice = params.tosPrice;\\n        info.initialTokenPrice = params.tokenPrice;\\n        info.initSqrtPriceX96 = uint160(params.initSqrtPrice);\\n        info.startTime = params.startTime;\\n        info.fee = params.fee;\\n\\n        emit InitializedInitialLiquidityVault(\\n            l2Token, params.totalAllocatedAmount, params.tosPrice, params.tokenPrice, params.startTime, uint160(params.initSqrtPrice), params.fee);\\n    }\\n\\n    /* ========== only VaultAdmin Of Token ========== */\\n    function setStartTime(address l2Token, uint32 _startTime)\\n        public onlyVaultAdminOfToken(l2Token)\\n    {\\n        LibInitialLiquidityVault.PoolInfo storage info = poolInfo[l2Token];\\n        require(block.timestamp < info.startTime, \\\"StartTime has passed\\\");\\n        require(info.startTime != _startTime, \\\"same StartTime\\\");\\n        info.startTime = _startTime;\\n        emit SetStartTime(l2Token, _startTime);\\n    }\\n\\n    /* ========== Anyone can  ========== */\\n\\n    function setCreatePool(address l2Token) external beforeSetReadyToCreatePool(l2Token) ifFree\\n    {\\n        LibInitialLiquidityVault.PoolInfo storage info = poolInfo[l2Token];\\n        require(info.startTime > 0 && info.startTime < uint32(block.timestamp), \\\"StartTime has not passed.\\\");\\n        require(info.pool == address(0), \\\"already created\\\");\\n        require(info.initSqrtPriceX96 > 0, \\\"zero initSqrtPriceX96\\\");\\n        address pool = IIUniswapV3Factory(uniswapV3Factory).getPool(tos, l2Token, info.fee);\\n\\n        if(pool == address(0)){\\n            address _pool = IIUniswapV3Factory(uniswapV3Factory).createPool(tos, l2Token, info.fee);\\n            require(_pool != address(0), \\\"createPool fail\\\");\\n            pool = _pool;\\n        }\\n\\n        info.pool = pool;\\n        info.boolReadyToCreatePool = true;\\n\\n        (uint160 sqrtPriceX96,,,,,,) =  IIUniswapV3Pool(pool).slot0();\\n        if(sqrtPriceX96 == 0){\\n            IIUniswapV3Pool(pool).initialize(info.initSqrtPriceX96);\\n            emit SetPoolInitialized(l2Token, pool, info.initSqrtPriceX96);\\n        }\\n        emit SetCreatedPool(l2Token, pool);\\n\\n        (uint160 _sqrtPriceX96,,,,,,) =  IIUniswapV3Pool(pool).slot0();\\n        require(_sqrtPriceX96 != 0, 'zero _sqrtPriceX96');\\n\\n    }\\n\\n    function mint(address l2Token, uint256 tosAmount)\\n        external readyToCreatePool(l2Token) nonZero(tosAmount) ifFree\\n    {\\n        uint256 tosBalance =  IERC20(tos).balanceOf(address(this));\\n        uint256 tokenBalance =  IERC20(l2Token).balanceOf(address(this));\\n        require(tosBalance > 1 ether && tokenBalance > 1 ether, \\\"balance is insufficient\\\");\\n        require(tosAmount <= tosBalance, \\\"toBalance is insufficient\\\");\\n\\n        if (acceptTickChangeInterval == 0) acceptTickChangeInterval = 8;\\n        if (acceptSlippagePrice == 0) acceptSlippagePrice = 10; // based 100\\n        if (TWAP_PERIOD == 0) TWAP_PERIOD = 120;\\n\\n        LibInitialLiquidityVault.PoolInfo memory info = poolInfo[l2Token];\\n        (uint160 sqrtPriceX96, int24 tick,,uint16 observationCardinality,,,) =  IIUniswapV3Pool(info.pool).slot0();\\n        require(sqrtPriceX96 > 0, \\\"pool is not initialized\\\");\\n\\n        if (observationCardinality > 1)\\n        {\\n            int24 timeWeightedAverageTick = OracleLibrary.consult(info.pool, TWAP_PERIOD);\\n            require(\\n                acceptMinTick(timeWeightedAverageTick, getTickSpacing(info.fee)) <= tick\\n                && tick < acceptMaxTick(timeWeightedAverageTick, getTickSpacing(info.fee)),\\n                \\\"It's not allowed changed tick range.\\\"\\n            );\\n        }\\n\\n        uint256 amount0Desired = 0;\\n        uint256 amount1Desired = 0;\\n        address token0 = IIUniswapV3Pool(info.pool).token0();\\n        address _l2Token = l2Token;\\n        if(token0 != tos){\\n            amount0Desired = getQuoteAtTick(\\n                tick,\\n                uint128(tosAmount),\\n                tos,\\n                _l2Token\\n                );\\n            amount1Desired = tosAmount;\\n            require(amount0Desired <= tokenBalance, \\\"tokenBalance is insufficient\\\");\\n            checkBalance(_l2Token, amount1Desired, amount0Desired);\\n        } else {\\n            amount0Desired = tosAmount;\\n            amount1Desired = getQuoteAtTick(\\n                tick,\\n                uint128(tosAmount),\\n                tos,\\n                _l2Token\\n                );\\n\\n            require(amount1Desired <= tokenBalance, \\\"tokenBalance is insufficient\\\");\\n            checkBalance(_l2Token, amount0Desired, amount1Desired);\\n        }\\n\\n        uint256 amount0Min = amount0Desired * (100 - uint256(int256(acceptSlippagePrice))) / 100;\\n        uint256 amount1Min = amount1Desired * (100 - uint256(int256(acceptSlippagePrice))) / 100;\\n\\n        if(poolInfo[_l2Token].lpToken == 0)  initialMint(_l2Token, amount0Desired, amount1Desired, amount0Min, amount1Min);\\n        else increaseLiquidity(_l2Token, amount0Desired, amount1Desired, amount0Min, amount1Min);\\n    }\\n\\n\\n    /* ========== VIEW ========== */\\n\\n    function getTickSpacing(uint24 _fee) public pure returns (int24 tickSpacings)\\n    {\\n        if(_fee == 100) tickSpacings = 2;\\n        else if(_fee == 500) tickSpacings = 10;\\n        else if(_fee == 3000) tickSpacings = 60;\\n        else if(_fee == 10000) tickSpacings = 200;\\n    }\\n\\n    function acceptMinTick(int24 _tick, int24 _tickSpacings) public view returns (int24)\\n    {\\n        int24 _minTick = getMiniTick(_tickSpacings);\\n        int24 _acceptMinTick = _tick - (_tickSpacings * int24(uint24(acceptTickChangeInterval)));\\n\\n        if(_minTick < _acceptMinTick) return _acceptMinTick;\\n        else return _minTick;\\n    }\\n\\n    function acceptMaxTick(int24 _tick, int24 _tickSpacings) public view returns (int24)\\n    {\\n        int24 _maxTick = getMaxTick(_tickSpacings);\\n        int24 _acceptMinTick = _tick + (_tickSpacings * int24(uint24(acceptTickChangeInterval)));\\n\\n        if(_maxTick < _acceptMinTick) return _maxTick;\\n        else return _acceptMinTick;\\n    }\\n\\n    function getMiniTick(int24 tickSpacings) public pure returns (int24){\\n           return (TickMath.MIN_TICK / tickSpacings) * tickSpacings ;\\n    }\\n\\n    function getMaxTick(int24 tickSpacings) public pure  returns (int24){\\n           return (TickMath.MAX_TICK / tickSpacings) * tickSpacings ;\\n    }\\n\\n    function getQuoteAtTick(\\n        int24 tick,\\n        uint128 amountIn,\\n        address baseToken,\\n        address quoteToken\\n    ) public pure returns (uint256 amountOut) {\\n        return OracleLibrary.getQuoteAtTick(tick, amountIn, baseToken, quoteToken);\\n    }\\n\\n    /* === ======= internal ========== */\\n\\n    function increaseLiquidity(address l2Token, uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min) internal\\n    {\\n        LibInitialLiquidityVault.PoolInfo storage info = poolInfo[l2Token];\\n        require(info.lpToken > 0, \\\"It is not minted yet\\\");\\n\\n        (uint128 liquidity, uint256 amount0, uint256 amount1) = INonfungiblePositionManager(nonfungiblePositionManager).increaseLiquidity(\\n            INonfungiblePositionManager.IncreaseLiquidityParams(\\n                info.lpToken, amount0Desired, amount1Desired, amount0Min, amount1Min, block.timestamp));\\n\\n        emit IncreasedLiquidityInVault(info.lpToken, liquidity, amount0, amount1);\\n    }\\n\\n\\n    function initialMint(address l2Token, uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min) internal\\n    {\\n        LibInitialLiquidityVault.PoolInfo storage info = poolInfo[l2Token];\\n\\n        require(info.lpToken == 0, \\\"already minted\\\");\\n        int24 tickLower = (TickMath.MIN_TICK / getTickSpacing(info.fee)) * getTickSpacing(info.fee) ;\\n        int24 tickUpper = (TickMath.MAX_TICK / getTickSpacing(info.fee)) * getTickSpacing(info.fee) ;\\n\\n        (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        ) = INonfungiblePositionManager(nonfungiblePositionManager).mint(INonfungiblePositionManager.MintParams(\\n                IIUniswapV3Pool(info.pool).token0(),\\n                IIUniswapV3Pool(info.pool).token1(),\\n                info.fee, tickLower, tickUpper,\\n                amount0Desired, amount1Desired, amount0Min, amount1Min,\\n                address(this), block.timestamp\\n            )\\n        );\\n\\n        require(tokenId > 0, \\\"zero tokenId\\\");\\n\\n        info.lpToken = tokenId;\\n\\n        emit InitialMintedInVault(l2Token, info.pool, tokenId, liquidity, amount0, amount1);\\n    }\\n\\n\\n    function checkBalance(address l2Token, uint256 tosBalance, uint256 tokenBalance) internal  {\\n        require(IERC20(tos).balanceOf(address(this)) >= tosBalance, \\\"tos is insufficient.\\\");\\n        require(IERC20(l2Token).balanceOf(address(this)) >= tokenBalance, \\\"token is insufficient.\\\");\\n         if(tosBalance > IERC20(tos).allowance(address(this), nonfungiblePositionManager) ) {\\n                require(IERC20(tos).approve(nonfungiblePositionManager, IERC20(tos).totalSupply()),\\\"TOS approve fail\\\");\\n        }\\n\\n        if(tokenBalance > IERC20(l2Token).allowance(address(this), nonfungiblePositionManager) ) {\\n            require(IERC20(l2Token).approve(nonfungiblePositionManager, IERC20(l2Token).totalSupply()),\\\"token approve fail\\\");\\n        }\\n    }\\n\\n    function viewVaultInfo(address l2Token) external view returns(LibInitialLiquidityVault.PoolInfo memory){\\n\\n        return poolInfo[l2Token];\\n\\n    }\\n\\n}\\n\",\"keccak256\":\"0x06d1ff6da189300232e3091291b9d32cf43043cdc18bf4e3816d6abd99aae067\",\"license\":\"Unlicense\"},\"contracts/L2/vaults/L2InitialLiquidityVaultStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { LibInitialLiquidityVault } from \\\"../../libraries/LibInitialLiquidityVault.sol\\\";\\n\\ncontract L2InitialLiquidityVaultStorage {\\n    uint256 constant INITIAL_PRICE_DIV = 1e18;\\n\\n    address public ton;  //  ton token\\n    address public tos;  //  tos token\\n\\n    address public uniswapV3Factory;\\n    address public nonfungiblePositionManager;\\n    uint32 public TWAP_PERIOD;\\n    // int24 public tickIntervalMinimum;\\n    int24 public acceptTickChangeInterval;\\n    int24 public acceptSlippagePrice;\\n    int24 public tickSpacings ;\\n\\n    // l2token - PoolInfo\\n    mapping(address => LibInitialLiquidityVault.PoolInfo) public poolInfo;\\n\\n}\\n\",\"keccak256\":\"0xb24af5edd294a876d7d1f76592989fc681a7b2cc5660e003f4c766b87c797529\",\"license\":\"MIT\"},\"contracts/common/AccessRoleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AccessRoleCommon {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant POLICY_ROLE = keccak256(\\\"POLICY_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xd33c0944095da18c41a9434b86d34de8ce9c3667b57072c6b8b0567d406c814a\",\"license\":\"MIT\"},\"contracts/common/AccessibleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AccessRoleCommon.sol\\\";\\n\\ncontract AccessibleCommon is AccessRoleCommon, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"Accessible: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) external virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(ADMIN_ROLE, newAdmin);\\n        renounceRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(ADMIN_ROLE, account);\\n    }\\n}\\n\",\"keccak256\":\"0x846f0a4ecf6c7598f710d256c400f5fd47f23ce38df5ff9fe1fed41104568613\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function mint(address account, uint256 amount) external returns (bool);\\n\\n    function burn(address account, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x4dfcbed37adf9f54e4544d13382814f51c9ef5d52ca4277d2080f988857f3b23\",\"license\":\"MIT\"},\"contracts/libraries/LibInitialLiquidityVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title LibInitialLiquidityVault\\n */\\nlibrary LibInitialLiquidityVault {\\n\\n    struct PoolInfo {\\n        address pool;\\n        uint256 totalAllocatedAmount;\\n        uint256 initialTosPrice;\\n        uint256 initialTokenPrice;\\n        uint256 lpToken;\\n        uint32 startTime;\\n        uint160 initSqrtPriceX96;\\n        uint24  fee;\\n        bool boolReadyToCreatePool;\\n    }\\n}\",\"keccak256\":\"0x18b8629b535e46d7ba9c91e96134107df92ccd8d228a49026bfcf662765bd9b4\",\"license\":\"MIT\"},\"contracts/libraries/LibProject.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface AddressManagerI {\\n    function getAddress(string memory _name) external view returns (address);\\n}\\n\\n/**\\n * @title LibProject\\n */\\nlibrary LibProject {\\n\\n    enum TOKEN_TYPE {\\n        ERC20_A,\\n        ERC20_B,\\n        ERC20_C,\\n        ERC20_D,\\n        NONE\\n    }\\n\\n    enum L2_TYPE {\\n        TOKAMAL_OPTIMISM,\\n        TOKAMAL_ZKEVM,\\n        NONE\\n    }\\n\\n    struct ProjectInfo {\\n        address projectOwner;\\n        address tokenOwner;\\n        address l1Token;\\n        address l2Token;\\n        address addressManager;\\n        uint256 initialTotalSupply;\\n        uint8 tokenType;\\n        uint8 l2Type;\\n        string projectName;\\n    }\\n\\n    struct L2Info {\\n        address l2TokenFactory;\\n        address l2ProjectManager;\\n        uint32 depositMinGasLimit;\\n        uint32 sendMsgMinGasLimit;\\n    }\\n\\n    struct L2ProjectInfo {\\n        uint256 projectId;\\n        address projectOwner;\\n        address l1Token;\\n        address l2Token;\\n        string projectName;\\n    }\\n\\n    struct TokamakVaults {\\n        InitalParameterPublicSale publicSaleParams;\\n        InitalParameterInitialLiquidityVault initialVaultParams;\\n        InitalParameterLiquidityRewardVault rewardParams;\\n        InitalParameterScheduleVault tosAirdropParams;\\n        InitalParameterScheduleVault tonAirdropParams;\\n    }\\n\\n    struct InitalParameterPublicSale {\\n        InitalParameterPublicSaleVault vaultParams;\\n        InitalParameterPublicSaleClaim claimParams;\\n    }\\n\\n    struct InitalParameterPublicSaleVault {\\n        uint256 stosTier1;\\n        uint256 stosTier2;\\n        uint256 stosTier3;\\n        uint256 stosTier4;\\n        uint256 tier1Percents;\\n        uint256 tier2Percents;\\n        uint256 tier3Percents;\\n        uint256 tier4Percents;\\n        uint256 total1roundSaleAmount;\\n        uint256 total2roundSaleAmount;\\n        uint256 saleTokenPrice;\\n        uint256 payTokenPrice;\\n        uint256 hardcapAmount;\\n        uint256 changeTOSPercent;\\n        uint256 startWhiteTime;\\n        uint256 endWhiteTime;\\n        uint256 start1roundTime;\\n        uint256 end1roundTime;\\n        uint256 snapshotTime;\\n        uint256 start2roundTime;\\n        uint256 end2roundTime;\\n        uint256 claimCounts;\\n    }\\n\\n    struct InitalParameterPublicSaleClaim {\\n        uint256[] claimTimes;\\n        uint256[] claimPercents;\\n    }\\n\\n    struct InitalParameterInitialLiquidityVault {\\n        uint256 totalAllocatedAmount;\\n        uint256 tosPrice;\\n        uint256 tokenPrice;\\n        uint256 initSqrtPrice;\\n        uint32 startTime;\\n        uint16 fee;\\n    }\\n\\n    struct InitalParameterLiquidityRewardVault {\\n        address poolAddress;\\n        InitalParameterScheduleVault params;\\n    }\\n\\n    struct InitalParameterSchedule {\\n        string vaultName;\\n        InitalParameterScheduleVault params;\\n    }\\n\\n    struct InitalParameterScheduleVault {\\n        address claimer;\\n        uint256 totalAllocatedAmount;\\n        uint256 totalClaimCount;\\n        uint256 firstClaimAmount;\\n        uint32 firstClaimTime;\\n        uint32 secondClaimTime;\\n        uint32 roundIntervalTime;\\n    }\\n\\n    struct InitalParameterNonScheduleVault {\\n        string vaultName;\\n        address claimer;\\n        uint256 totalAllocatedAmount;\\n    }\\n\\n    function getL1CommunicationMessenger(address addressManager) external view returns(address _address) {\\n        if (addressManager == address(0)) return address(0);\\n        try\\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1CrossDomainMessenger') returns (address a) {\\n                _address = a;\\n        } catch (bytes memory ) {\\n            _address = address(0);\\n        }\\n    }\\n\\n    function getL1Bridge(address addressManager) external view returns(address _address) {\\n        if (addressManager == address(0)) return address(0);\\n        try\\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1StandardBridge') returns (address a) {\\n                _address = a;\\n        } catch (bytes memory ) {\\n            _address = address(0);\\n        }\\n    }\\n\\n    function validateTokamakVaults(TokamakVaults memory tokamakVaults)\\n    public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        // if ((tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount\\n        //     +tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount) == 0 ||\\n        //     tokamakVaults.initialVaultParams.totalAllocatedAmount == 0 ||\\n        //     tokamakVaults.rewardParams.params.totalAllocatedAmount == 0 ||\\n        //     tokamakVaults.tosAirdropParams.totalAllocatedAmount == 0 ||\\n        //     tokamakVaults.tonAirdropParams.totalAllocatedAmount == 0\\n        // ) return (boolValidate, totalAmount);\\n\\n        // if (tokamakVaults.initialVaultParams.tosPrice == 0 ||\\n        //     tokamakVaults.initialVaultParams.tokenPrice == 0 ||\\n        //     tokamakVaults.initialVaultParams.initSqrtPrice == 0 ||\\n        //     tokamakVaults.initialVaultParams.startTime == 0 ||\\n        //     tokamakVaults.initialVaultParams.fee == 0) return (boolValidate, totalAmount);\\n\\n        // if (tokamakVaults.rewardParams.poolAddress == address(0) ||\\n        //     tokamakVaults.rewardParams.params.totalClaimCount == 0 ||\\n        //     tokamakVaults.rewardParams.params.firstClaimAmount == 0 ||\\n        //     tokamakVaults.rewardParams.params.firstClaimTime == 0 ||\\n        //     tokamakVaults.rewardParams.params.secondClaimTime == 0 ||\\n        //     tokamakVaults.rewardParams.params.roundIntervalTime == 0\\n        //     ) return (boolValidate, totalAmount);\\n\\n        // if (tokamakVaults.tosAirdropParams.totalClaimCount == 0 ||\\n        //     tokamakVaults.tosAirdropParams.firstClaimAmount == 0 ||\\n        //     tokamakVaults.tosAirdropParams.firstClaimTime == 0 ||\\n        //     tokamakVaults.tosAirdropParams.secondClaimTime == 0 ||\\n        //     tokamakVaults.tosAirdropParams.roundIntervalTime == 0\\n        //     ) return (boolValidate, totalAmount);\\n\\n        // if (tokamakVaults.tonAirdropParams.totalClaimCount == 0 ||\\n        //     tokamakVaults.tonAirdropParams.firstClaimAmount == 0 ||\\n        //     tokamakVaults.tonAirdropParams.firstClaimTime == 0 ||\\n        //     tokamakVaults.tonAirdropParams.secondClaimTime == 0 ||\\n        //     tokamakVaults.tonAirdropParams.roundIntervalTime == 0\\n        //     ) return (boolValidate, totalAmount);\\n\\n\\n        totalAmount = tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount +\\n                    tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount +\\n                    tokamakVaults.initialVaultParams.totalAllocatedAmount +\\n                    tokamakVaults.rewardParams.params.totalAllocatedAmount +\\n                    tokamakVaults.tosAirdropParams.totalAllocatedAmount +\\n                    tokamakVaults.tonAirdropParams.totalAllocatedAmount ;\\n\\n        if (totalAmount == 0) return (boolValidate, totalAmount);\\n\\n        boolValidate = true;\\n    }\\n\\n    function validateScheduleVault(\\n        InitalParameterSchedule[] memory customs\\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if (customs.length != 0) {\\n            for(uint256 i = 0; i < customs.length; i++){\\n                if (customs[i].params.totalAllocatedAmount == 0 ||\\n                    customs[i].params.totalClaimCount == 0 ||\\n                    customs[i].params.firstClaimAmount == 0 ||\\n                    customs[i].params.firstClaimTime == 0 ||\\n                    customs[i].params.secondClaimTime == 0 ||\\n                    customs[i].params.roundIntervalTime == 0\\n                    ) return (boolValidate, totalAmount);\\n\\n                totalAmount += customs[i].params.totalAllocatedAmount;\\n            }\\n            boolValidate = true;\\n        }\\n    }\\n\\n    function validateNonScheduleVault(\\n        InitalParameterNonScheduleVault[] memory customs\\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if (customs.length != 0) {\\n            for(uint256 i =0 ; i < customs.length; i++){\\n                if (customs[i].totalAllocatedAmount == 0) return (boolValidate, totalAmount);\\n                totalAmount += customs[i].totalAllocatedAmount;\\n            }\\n            boolValidate = true;\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x70aa30ad2bdcc19fee1890162b02f21077efadb0da73a0898d2806f96ff0ffe5\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x778abe92595c692abcf3bec8b72f4491746626d1a057c76b97c8d1a7d759f7b0\",\"license\":\"AGPL-3.0-only\"},\"contracts/proxy/ProxyStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage  {\\n\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n}\",\"keccak256\":\"0x0c29ab2e9f114400a3825c2a0ed8c0594cbf19e0322b7465140b61f5b5de6d96\",\"license\":\"Unlicense\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526005805460ff1916600117905534801561001d57600080fd5b50614e788061002d6000396000f3fe608060405234801561001057600080fd5b50600436106103155760003560e01c806370480275116101a7578063a22f84f0116100ee578063b9c56c8c11610097578063d547741f11610071578063d547741f1461082c578063dc861da61461083f578063ea8668151461094557600080fd5b8063b9c56c8c146107f3578063bef6dc8b14610806578063cc48b9471461081957600080fd5b8063b224f99f116100c8578063b224f99f146107a4578063b44a2722146107b7578063b911135f146107ca57600080fd5b8063a22f84f01461076b578063a41823431461077e578063aec137581461079157600080fd5b806389f395de116101505780639a7b5f111161012a5780639a7b5f111461067e5780639cbbbe8614610756578063a217fddf1461076357600080fd5b806389f395de1461061f57806391d1485414610632578063971c57cc1461066b57600080fd5b80637ca25184116101815780637ca25184146105b75780637fc46ba8146105e3578063826bd4bf1461060c57600080fd5b8063704802751461056a57806375829def1461057d57806375b238fc1461059057600080fd5b806336568abe1161026b57806350d2a27611610214578063550d01a3116101ee578063550d01a3146105275780635b5491821461054a57806363a8fd891461055d57600080fd5b806350d2a276146104bb57806351e8152a146104fc57806352351e851461050f57600080fd5b806343c57a271161024557806343c57a2714610481578063442bede61461049457806345a41148146104a757600080fd5b806336568abe1461044857806337c1cfa51461045b57806340c10f191461046e57600080fd5b8063248a9ca3116102cd5780632f2ff15d116102a75780632f2ff15d1461040e57806335b9ac661461042157806335d20f8a1461043457600080fd5b8063248a9ca3146103c557806324d7806c146103e85780632c00778a146103fb57600080fd5b80631785f53c116102fe5780631785f53c146103685780631e8948c31461037d578063229852461461039057600080fd5b806301ffc9a71461031a5780630f36edbf14610342575b600080fd5b61032d610328366004614306565b610958565b60405190151581526020015b60405180910390f35b61035561035036600461433f565b61098f565b60405160029190910b8152602001610339565b61037b61037636600461438d565b6109eb565b005b61037b61038b3660046143aa565b610a6b565b6103b77ffb5864e8ff833c3cb2d2d08505e82ff02a43554c74a35d4f5a64e8526127831181565b604051908152602001610339565b6103b76103d33660046143d8565b60009081526004602052604090206001015490565b61032d6103f636600461438d565b610c44565b61037b6104093660046143f1565b610c84565b61037b61041c36600461440e565b610d7a565b61037b61042f3660046143aa565b610da4565b600a5461035590600160d81b900460020b81565b61037b61045636600461440e565b610f59565b61037b61046936600461438d565b610fe5565b61037b61047c366004614433565b611628565b6103b761048f366004614474565b611dac565b61037b6104a236600461453b565b611dc3565b600a5461035590600160c01b900460020b81565b6104e46104c9366004614306565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610339565b61032d61050a3660046143aa565b61221e565b6005546104e49061010090046001600160a01b031681565b61032d61053536600461438d565b60026020526000908152604090205460ff1681565b6009546104e4906001600160a01b031681565b60005461032d9060ff1681565b61037b61057836600461438d565b61225b565b61037b61058b36600461438d565b6122d3565b6103b77fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b600a546105ce90600160a01b900463ffffffff1681565b60405163ffffffff9091168152602001610339565b6104e46105f136600461438d565b6006602052600090815260409020546001600160a01b031681565b61035561061a3660046143f1565b612423565b6008546104e4906001600160a01b031681565b61032d61064036600461440e565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61037b6106793660046145eb565b61243e565b6106f661068c36600461438d565b600c602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b039485169593949293919263ffffffff821691640100000000810490911690600160c01b810462ffffff1690600160d81b900460ff1689565b604080516001600160a01b039a8b16815260208101999099528801969096526060870194909452608086019290925263ffffffff1660a085015290931660c083015262ffffff90921660e082015290151561010082015261012001610339565b600b546103559060020b81565b6103b7600081565b6103556107793660046143f1565b612603565b61037b61078c36600461438d565b61261e565b61035561079f36600461433f565b612729565b61037b6107b2366004614620565b61277d565b600a546104e4906001600160a01b031681565b6104e46107d83660046143d8565b6001602052600090815260409020546001600160a01b031681565b61037b6108013660046143f1565b61287a565b61037b61081436600461463b565b612970565b6007546104e4906001600160a01b031681565b61037b61083a36600461440e565b612bdf565b61093861084d36600461438d565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810191909152506001600160a01b039081166000908152600c6020908152604091829020825161012081018452815485168152600182015492810192909252600281015492820192909252600382015460608201526004820154608082015260059091015463ffffffff811660a0830152640100000000810490921660c0820152600160c01b820462ffffff1660e0820152600160d81b90910460ff16151561010082015290565b604051610339919061466c565b6103556109533660046146ff565b612c04565b60006001600160e01b03198216637965db0b60e01b148061098957506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008061099b83612423565b600a549091506000906109b890600160c01b900460020b8561473a565b6109c29086614761565b90508060020b8260020b12156109db5791506109899050565b509050610989565b505092915050565b6109f433610c44565b610a3e5760405162461bcd60e51b81526020600482015260226024820152600080516020614e4c83398151915260448201526134b760f11b60648201526084015b60405180910390fd5b610a687fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610f59565b50565b816001600160a01b038116610aa75760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b816001600160a01b038116610ae35760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b6001600160a01b0380851660009081526006602052604090205485911615801590610b2757506001600160a01b038181166000908152600660205260409020541633145b610b815760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b6064820152608401610a35565b6001600160a01b03858116600090815260066020526040902054818616911603610bd65760405162461bcd60e51b8152600401610a359060208082526004908201526373616d6560e01b604082015260600190565b6001600160a01b0385811660008181526006602090815260409182902080546001600160a01b031916948916948517905581519283528201929092527fb00bb4c229aff6156cc8e2c767c571665e1927c09fe083ec055956a5a4026193910160405180910390a15050505050565b6001600160a01b03811660009081527f2fb794d17134dfdec181ddbac1babb5ab1eb140204ef4d982f294e7fc8b69022602052604081205460ff16610989565b610c8d33610c44565b610cd25760405162461bcd60e51b81526020600482015260226024820152600080516020614e4c83398151915260448201526134b760f11b6064820152608401610a35565b60008160020b13610d0e5760405162461bcd60e51b8152600401610a35906020808252600490820152637a65726f60e01b604082015260600190565b600a54600282810b600160d81b909204900b03610d565760405162461bcd60e51b8152600401610a359060208082526004908201526373616d6560e01b604082015260600190565b600a805462ffffff909216600160d81b0262ffffff60d81b19909216919091179055565b600082815260046020526040902060010154610d9581612c5e565b610d9f8383612c68565b505050565b816001600160a01b038116610de05760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b816001600160a01b038116610e1c5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b60055461010090046001600160a01b031615801590610e4a575060055461010090046001600160a01b031633145b610e965760405162461bcd60e51b815260206004820152601e60248201527f63616c6c6572206973206e6f74206c3250726f6a6563744d616e6167657200006044820152606401610a35565b6001600160a01b03848116600090815260066020526040902054818516911603610eeb5760405162461bcd60e51b8152600401610a359060208082526004908201526373616d6560e01b604082015260600190565b6001600160a01b0384811660008181526006602090815260409182902080546001600160a01b031916948816948517905581519283528201929092527fb00bb4c229aff6156cc8e2c767c571665e1927c09fe083ec055956a5a402619391015b60405180910390a150505050565b6001600160a01b0381163314610fd75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610a35565b610fe18282612d0a565b5050565b6001600160a01b0381166000908152600c60205260409020600501548190600160d81b900460ff16156110655760405162461bcd60e51b815260206004820152602260248201527f5661756c743a20616c726561647920726561647920746f20437265617465506f6044820152611bdb60f21b6064820152608401610a35565b60055460ff166110a05760405162461bcd60e51b8152600401610a35906020808252600490820152636c6f636b60e01b604082015260600190565b6005805460ff191681556001600160a01b0383166000908152600c602052604090209081015463ffffffff16158015906110e65750600581015463ffffffff4281169116105b6111325760405162461bcd60e51b815260206004820152601960248201527f537461727454696d6520686173206e6f74207061737365642e000000000000006044820152606401610a35565b80546001600160a01b03161561118a5760405162461bcd60e51b815260206004820152600f60248201527f616c7265616479206372656174656400000000000000000000000000000000006044820152606401610a35565b600581015464010000000090046001600160a01b03166111ec5760405162461bcd60e51b815260206004820152601560248201527f7a65726f20696e697453717274507269636558393600000000000000000000006044820152606401610a35565b6009546008546005830154604051630b4c774160e11b81526001600160a01b0392831660048201528683166024820152600160c01b90910462ffffff1660448201526000929190911690631698ee8290606401602060405180830381865afa15801561125c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112809190614786565b90506001600160a01b03811661138157600954600854600584015460405163a167129560e01b81526001600160a01b0392831660048201528783166024820152600160c01b90910462ffffff166044820152600092919091169063a1671295906064016020604051808303816000875af1158015611302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113269190614786565b90506001600160a01b03811661137e5760405162461bcd60e51b815260206004820152600f60248201527f637265617465506f6f6c206661696c00000000000000000000000000000000006044820152606401610a35565b90505b81546001600160a01b0382166001600160a01b0319909116811783556005830180547fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160d81b17905560408051633850c7bd60e01b8152905160009291633850c7bd9160048083019260e09291908290030181865afa15801561140b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142f91906147b3565b5050505050509050806001600160a01b031660000361150b57600583015460405163f637731d60e01b81526401000000009091046001600160a01b03908116600483015283169063f637731d90602401600060405180830381600087803b15801561149957600080fd5b505af11580156114ad573d6000803e3d6000fd5b505050506005830154604080516001600160a01b038881168252858116602083015264010000000090930490921682820152517fca9098798fa03760d7709c3305b3b049d2c71fa6e891a83a36fe90a15eeab7809181900360600190a15b604080516001600160a01b038088168252841660208201527ffb9092f7bd4a3c6c55439411fb56fe4d44878125340b674c6ab5b5dda38d0b1c910160405180910390a16000826001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa15801561158e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b291906147b3565b5050505050509050806001600160a01b03166000036116135760405162461bcd60e51b815260206004820152601260248201527f7a65726f205f73717274507269636558393600000000000000000000000000006044820152606401610a35565b50506005805460ff1916600117905550505050565b6001600160a01b0382166000908152600c60205260409020600501548290600160d81b900460ff1661169c5760405162461bcd60e51b815260206004820152601e60248201527f5661756c743a206e6f7420726561647920746f20437265617465506f6f6c00006044820152606401610a35565b81806000036116d25760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610a35565b60055460ff1661170d5760405162461bcd60e51b8152600401610a35906020808252600490820152636c6f636b60e01b604082015260600190565b6005805460ff191690556008546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611760573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117849190614850565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038716906370a0823190602401602060405180830381865afa1580156117ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f29190614850565b9050670de0b6b3a7640000821180156118125750670de0b6b3a764000081115b61185e5760405162461bcd60e51b815260206004820152601760248201527f62616c616e636520697320696e73756666696369656e740000000000000000006044820152606401610a35565b818511156118ae5760405162461bcd60e51b815260206004820152601960248201527f746f42616c616e636520697320696e73756666696369656e74000000000000006044820152606401610a35565b600a54600160c01b900460020b6000036118d857600a805462ffffff60c01b1916600160c31b1790555b600a54600160d81b900460020b60000361190257600a805462ffffff60d81b1916600560d91b1790555b600a54600160a01b900463ffffffff1660000361194157600a805463ffffffff60a01b1916747800000000000000000000000000000000000000001790555b6001600160a01b038681166000908152600c602090815260408083208151610120810183528154861680825260018301549482019490945260028201548184015260038201546060820152600480830154608083015260059092015463ffffffff811660a0830152640100000000810490961660c0820152600160c01b860462ffffff1660e080830191909152600160d81b90960460ff1615156101008201528251633850c7bd60e01b815292519095859485949093633850c7bd9382820193929091908290030181865afa158015611a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4291906147b3565b505050935050925092506000836001600160a01b031611611aa55760405162461bcd60e51b815260206004820152601760248201527f706f6f6c206973206e6f7420696e697469616c697a65640000000000000000006044820152606401610a35565b60018161ffff161115611b67578351600a54600091611ad091600160a01b900463ffffffff16612d8d565b90508260020b611ae7826103508860e00151612c04565b60020b13158015611b0d5750611b048161079f8760e00151612c04565b60020b8360020b125b611b655760405162461bcd60e51b8152602060048201526024808201527f49742773206e6f7420616c6c6f776564206368616e676564207469636b2072616044820152633733b29760e11b6064820152608401610a35565b505b600080600086600001516001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd29190614786565b6008549091508d906001600160a01b03808416911614611c6b57600854611c069087908f906001600160a01b031684611dac565b93508c925088841115611c5b5760405162461bcd60e51b815260206004820152601c60248201527f746f6b656e42616c616e636520697320696e73756666696369656e74000000006044820152606401610a35565b611c66818486612f4c565b611ce5565b6008548d9450611c8890879086906001600160a01b031684611dac565b925088831115611cda5760405162461bcd60e51b815260206004820152601c60248201527f746f6b656e42616c616e636520697320696e73756666696369656e74000000006044820152606401610a35565b611ce5818585612f4c565b600a54600090606490611d0290600160d81b900460020b82614869565b611d0c908761487c565b611d1691906148a9565b600a54909150600090606490611d3690600160d81b900460020b82614869565b611d40908761487c565b611d4a91906148a9565b6001600160a01b0384166000908152600c602052604081206004015491925003611d8057611d7b838787858561342e565b611d8d565b611d8d8387878585613812565b50506005805460ff191660011790555050505050505050505050505050565b6000611dba858585856139a7565b95945050505050565b600554829061010090046001600160a01b0316331480611e2057506001600160a01b038181166000908152600660205260409020541615801590611e2057506001600160a01b038181166000908152600660205260409020541633145b611e925760405162461bcd60e51b815260206004820152602c60248201527f63616c6c6572206973206e6f742061207661756c7441646d696e206f7220507260448201527f6f6a6563744d616e6167657200000000000000000000000000000000000000006064820152608401610a35565b6009546001600160a01b031615801590611eb65750600a546001600160a01b031615155b8015611ecc57506008546001600160a01b031615155b611f185760405162461bcd60e51b815260206004820152601860248201527f5661756c743a206265666f726520736574556e697377617000000000000000006044820152606401610a35565b6001600160a01b0383166000908152600c602052604090206001015415611f815760405162461bcd60e51b815260206004820152601360248201527f616c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610a35565b815115801590611f945750602082015115155b8015611fa35750604082015115155b8015611fb25750606082015115155b8015611fc5575060a082015161ffff1615155b61205d5760405162461bcd60e51b815260206004820152605460248201527f7a65726f20746f74616c416c6c6f6361746564416d6f756e74206f7220746f7360448201527f5072696365206f7220746f6b656e5072696365206f7220696e6974537172745060648201527f72696365583936206f7220737461727454696d65000000000000000000000000608482015260a401610a35565b4263ffffffff16826080015163ffffffff16116120bc5760405162461bcd60e51b815260206004820152601460248201527f537461727454696d6520686173207061737365640000000000000000000000006044820152606401610a35565b60055482516120e0916001600160a01b038681169261010090920416903090613ab5565b6001600160a01b038084166000908152600c602090815260409182902085516001820181905591860151600282018190558684015160038301819055606088015160058401805460808b015160a08c0151600160c01b61ffff8216027fffffffffff000000ffffffffffffffffffffffffffffffffffffffff000000009b8616640100000000029b909b167fffffffffff0000000000000000000000000000000000000000000000000000009093169290921763ffffffff82161799909917909155955193967f060a95341b2743fc4109ee31674ef362aca6cdea36c46a5ed759920b83e244b096610f4b968c969095949391906001600160a01b03978816815260208101969096526040860194909452606085019290925263ffffffff16608084015290921660a082015261ffff9190911660c082015260e00190565b60006001600160a01b0382161580159061225457506001600160a01b038381166000908152600660205260409020548116908316145b9392505050565b61226433610c44565b6122a95760405162461bcd60e51b81526020600482015260226024820152600080516020614e4c83398151915260448201526134b760f11b6064820152608401610a35565b610a687fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610d7a565b6122dc33610c44565b6123215760405162461bcd60e51b81526020600482015260226024820152600080516020614e4c83398151915260448201526134b760f11b6064820152608401610a35565b6001600160a01b0381166123775760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f206164647265737300000000000000006044820152606401610a35565b6001600160a01b03811633036123cf5760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e000000000000000000006044820152606401610a35565b6123f97fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610d7a565b610a687fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4233610f59565b60008161243481620d89e7196148bd565b610989919061473a565b6001600160a01b038083166000908152600660205260409020548391161580159061248257506001600160a01b038181166000908152600660205260409020541633145b6124dc5760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b6064820152608401610a35565b6001600160a01b0383166000908152600c60205260409020600581015463ffffffff16421061254d5760405162461bcd60e51b815260206004820152601460248201527f537461727454696d6520686173207061737365640000000000000000000000006044820152606401610a35565b600581015463ffffffff8085169116036125a95760405162461bcd60e51b815260206004820152600e60248201527f73616d6520537461727454696d650000000000000000000000000000000000006044820152606401610a35565b60058101805463ffffffff191663ffffffff8516908117909155604080516001600160a01b038716815260208101929092527f1266d1525c8a4b88d83deeed8ccc3a233c359b7bd54f50c0b4ba71c4a330f5b59101610f4b565b60008180612614620d89e7196148f7565b61243491906148bd565b806001600160a01b03811661265a5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b61266333610c44565b6126a85760405162461bcd60e51b81526020600482015260226024820152600080516020614e4c83398151915260448201526134b760f11b6064820152608401610a35565b6005546001600160a01b0380841661010090920416036126f35760405162461bcd60e51b8152600401610a359060208082526004908201526373616d6560e01b604082015260600190565b50600580546001600160a01b039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b60008061273583612603565b600a5490915060009061275290600160c01b900460020b8561473a565b61275c9086614919565b90508060020b8260020b121561277457509050610989565b91506109899050565b61278633610c44565b6127cb5760405162461bcd60e51b81526020600482015260226024820152600080516020614e4c83398151915260448201526134b760f11b6064820152608401610a35565b60008163ffffffff161161280a5760405162461bcd60e51b8152600401610a35906020808252600490820152637a65726f60e01b604082015260600190565b600a5463ffffffff808316600160a01b90920416036128545760405162461bcd60e51b8152600401610a359060208082526004908201526373616d6560e01b604082015260600190565b600a805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b61288333610c44565b6128c85760405162461bcd60e51b81526020600482015260226024820152600080516020614e4c83398151915260448201526134b760f11b6064820152608401610a35565b60008160020b136129045760405162461bcd60e51b8152600401610a35906020808252600490820152637a65726f60e01b604082015260600190565b600a54600282810b600160c01b909204900b0361294c5760405162461bcd60e51b8152600401610a359060208082526004908201526373616d6560e01b604082015260600190565b600a805462ffffff909216600160c01b0262ffffff60c01b19909216919091179055565b61297933610c44565b6129be5760405162461bcd60e51b81526020600482015260226024820152600080516020614e4c83398151915260448201526134b760f11b6064820152608401610a35565b836001600160a01b0381166129fa5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b836001600160a01b038116612a365760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b836001600160a01b038116612a725760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b836001600160a01b038116612aae5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b6009546001600160a01b038981169116141580612ad95750600a546001600160a01b03888116911614155b80612af257506007546001600160a01b03878116911614155b80612b0b57506008546001600160a01b03868116911614155b612b405760405162461bcd60e51b8152600401610a359060208082526004908201526373616d6560e01b604082015260600190565b600980546001600160a01b038a81166001600160a01b03199283168117909355600a80548b83169084168117909155600780548b8416908516811790915560088054938b1693909416831790935560408051948552602085019190915283019190915260608201527f5f5458e04fbfd7e3d6d9563a2da2ea2a5b3a29c1303221569d209c8c673ceacc9060800160405180910390a15050505050505050565b600082815260046020526040902060010154612bfa81612c5e565b610d9f8383612d0a565b60008162ffffff16606403612c1b57506002919050565b8162ffffff166101f403612c315750600a919050565b8162ffffff16610bb803612c475750603c919050565b8162ffffff1661271003612c59575060c85b919050565b610a688133613bee565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16610fe15760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612cc63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff1615610fe15760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008163ffffffff16600003612dca5760405162461bcd60e51b8152602060048201526002602482015261042560f41b6044820152606401610a35565b6040805160028082526060820183526000926020830190803683370190505090508281600081518110612dff57612dff61493e565b602002602001019063ffffffff16908163ffffffff1681525050600081600181518110612e2e57612e2e61493e565b63ffffffff9092166020928302919091019091015260405163883bdbfd60e01b81526000906001600160a01b0386169063883bdbfd90612e72908590600401614954565b600060405180830381865afa158015612e8f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612eb79190810190614a36565b509050600081600081518110612ecf57612ecf61493e565b602002602001015182600181518110612eea57612eea61493e565b6020026020010151612efc9190614b02565b9050612f0c600386900b82614b2f565b935060008160060b128015612f305750612f2a600386900b82614b64565b60060b15155b15612f435783612f3f81614b86565b9450505b50505092915050565b6008546040516370a0823160e01b815230600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa158015612f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb89190614850565b10156130065760405162461bcd60e51b815260206004820152601460248201527f746f7320697320696e73756666696369656e742e0000000000000000000000006044820152606401610a35565b6040516370a0823160e01b815230600482015281906001600160a01b038516906370a0823190602401602060405180830381865afa15801561304c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130709190614850565b10156130be5760405162461bcd60e51b815260206004820152601660248201527f746f6b656e20697320696e73756666696369656e742e000000000000000000006044820152606401610a35565b600854600a54604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015291169063dd62ed3e90604401602060405180830381865afa158015613110573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131349190614850565b82111561327157600854600a54604080516318160ddd60e01b815290516001600160a01b039384169363095ea7b393169184916318160ddd916004808201926020929091908290030181865afa158015613192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b69190614850565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015613201573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132259190614ba9565b6132715760405162461bcd60e51b815260206004820152601060248201527f544f5320617070726f7665206661696c000000000000000000000000000000006044820152606401610a35565b600a54604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529084169063dd62ed3e90604401602060405180830381865afa1580156132c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e59190614850565b811115610d9f57826001600160a01b031663095ea7b3600a60009054906101000a90046001600160a01b0316856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561334f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133739190614850565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156133be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e29190614ba9565b610d9f5760405162461bcd60e51b815260206004820152601260248201527f746f6b656e20617070726f7665206661696c00000000000000000000000000006044820152606401610a35565b6001600160a01b0385166000908152600c602052604090206004810154156134985760405162461bcd60e51b815260206004820152600e60248201527f616c7265616479206d696e7465640000000000000000000000000000000000006044820152606401610a35565b60058101546000906134b590600160c01b900462ffffff16612c04565b60058301546134cf90600160c01b900462ffffff16612c04565b6134dd90620d89e7196148bd565b6134e7919061473a565b905060006135078360050160189054906101000a900462ffffff16612c04565b600584015461352190600160c01b900462ffffff16612c04565b61352e620d89e7196148f7565b61353891906148bd565b613542919061473a565b600a546040805161016081018083528754630dfe168160e01b90915291519394506000938493849384936001600160a01b0392831693638831645693919283921690630dfe168190610164808501916020918187030181865afa1580156135ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135d19190614786565b6001600160a01b031681526020018a60000160009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136589190614786565b6001600160a01b031681526020018a60050160189054906101000a900462ffffff1662ffffff1681526020018960020b81526020018860020b81526020018e81526020018d81526020018c81526020018b8152602001306001600160a01b03168152602001428152506040518263ffffffff1660e01b81526004016136dd9190614bc4565b6080604051808303816000875af11580156136fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137209190614c88565b9350935093509350600084116137785760405162461bcd60e51b815260206004820152600c60248201527f7a65726f20746f6b656e496400000000000000000000000000000000000000006044820152606401610a35565b6004870184905586546040517e80a7e05c1e726da26ef60dc270a12c37b0bc54fc6adbc18d22f991976cf332916137fc918f916001600160a01b03169088908890889088906001600160a01b03968716815294909516602085015260408401929092526001600160801b03166060830152608082015260a081019190915260c00190565b60405180910390a1505050505050505050505050565b6001600160a01b0385166000908152600c60205260409020600481015461387b5760405162461bcd60e51b815260206004820152601460248201527f4974206973206e6f74206d696e746564207965740000000000000000000000006044820152606401610a35565b600a546040805160c08101825260048481015482526020820189815282840189815260608401898152608085018981524260a08701908152965163219f5d1760e01b815295519486019490945291516024850152516044840152516064830152516084820152905160a4820152600091829182916001600160a01b03169063219f5d179060c4016060604051808303816000875af1158015613921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139459190614cc6565b6004870154604080516001600160801b0386168152602081018590529081018390529396509194509250907e242840c59a1b38c7f01b50c3ba18ebd1a8f5b28cfc8b9fb894c4ea46696ba49060600160405180910390a2505050505050505050565b6000806139b386613c63565b90506001600160801b036001600160a01b03821611613a395760006139e16001600160a01b0383168061487c565b9050836001600160a01b0316856001600160a01b031610613a1957613a14600160c01b876001600160801b031683614083565b613a31565b613a3181876001600160801b0316600160c01b614083565b925050613aac565b6000613a586001600160a01b0383168068010000000000000000614083565b9050836001600160a01b0316856001600160a01b031610613a9057613a8b600160801b876001600160801b031683614083565b613aa8565b613aa881876001600160801b0316600160801b614083565b9250505b50949350505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b1790529151600092839290881691613b2e9190614d21565b6000604051808303816000865af19150503d8060008114613b6b576040519150601f19603f3d011682016040523d82523d6000602084013e613b70565b606091505b5091509150818015613b9a575080511580613b9a575080806020019051810190613b9a9190614ba9565b613be65760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606401610a35565b505050505050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16610fe157613c218161414b565b613c2c83602061415d565b604051602001613c3d929190614d3d565b60408051601f198184030181529082905262461bcd60e51b8252610a3591600401614dbe565b60008060008360020b12613c7a578260020b613c87565b8260020b613c8790614df1565b9050613c96620d89e7196148f7565b60020b811115613ccc5760405162461bcd60e51b81526020600482015260016024820152601560fa1b6044820152606401610a35565b600081600116600003613ce357600160801b613cf5565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615613d34576080613d2f826ffff97272373d413259a46990580e213a61487c565b901c90505b6004821615613d5e576080613d59826ffff2e50f5f656932ef12357cf3c7fdcc61487c565b901c90505b6008821615613d88576080613d83826fffe5caca7e10e4e61c3624eaa0941cd061487c565b901c90505b6010821615613db2576080613dad826fffcb9843d60f6159c9db58835c92664461487c565b901c90505b6020821615613ddc576080613dd7826fff973b41fa98c081472e6896dfb254c061487c565b901c90505b6040821615613e06576080613e01826fff2ea16466c96a3843ec78b326b5286161487c565b901c90505b6080821615613e30576080613e2b826ffe5dee046a99a2a811c461f1969c305361487c565b901c90505b610100821615613e5b576080613e56826ffcbe86c7900a88aedcffc83b479aa3a461487c565b901c90505b610200821615613e86576080613e81826ff987a7253ac413176f2b074cf7815e5461487c565b901c90505b610400821615613eb1576080613eac826ff3392b0822b70005940c7a398e4b70f361487c565b901c90505b610800821615613edc576080613ed7826fe7159475a2c29b7443b29c7fa6e889d961487c565b901c90505b611000821615613f07576080613f02826fd097f3bdfd2022b8845ad8f792aa582561487c565b901c90505b612000821615613f32576080613f2d826fa9f746462d870fdf8a65dc1f90e061e561487c565b901c90505b614000821615613f5d576080613f58826f70d869a156d2a1b890bb3df62baf32f761487c565b901c90505b618000821615613f88576080613f83826f31be135f97d08fd981231505542fcfa661487c565b901c90505b62010000821615613fb4576080613faf826f09aa508b5b7a84e1c677de54f3e99bc961487c565b901c90505b62020000821615613fdf576080613fda826e5d6af8dedb81196699c329225ee60461487c565b901c90505b62040000821615614009576080614004826d2216e584f5fa1ea926041bedfe9861487c565b901c90505b6208000082161561403157608061402c826b048a170391f7dc42444e8fa261487c565b901c90505b60008460020b131561404c57614049816000196148a9565b90505b61405b64010000000082614e0d565b1561406757600161406a565b60005b61407b9060ff16602083901c614e21565b949350505050565b600080821161409157600080fd5b600080600019858709858702925082811083820303915050806000036140bc57508290049050612254565b8084116140c857600080fd5b6000848688098084039381119092039190506000856140e981600019614869565b6140f4906001614e21565b16958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030260008290038290046001019490940294049390931791909102925050509392505050565b60606109896001600160a01b03831660145b6060600061416c83600261487c565b614177906002614e21565b67ffffffffffffffff81111561418f5761418f6144d0565b6040519080825280601f01601f1916602001820160405280156141b9576020820181803683370190505b509050600360fc1b816000815181106141d4576141d461493e565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106142035761420361493e565b60200101906001600160f81b031916908160001a905350600061422784600261487c565b614232906001614e21565b90505b60018111156142b7577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106142735761427361493e565b1a60f81b8282815181106142895761428961493e565b60200101906001600160f81b031916908160001a90535060049490941c936142b081614e34565b9050614235565b5083156122545760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a35565b60006020828403121561431857600080fd5b81356001600160e01b03198116811461225457600080fd5b8060020b8114610a6857600080fd5b6000806040838503121561435257600080fd5b823561435d81614330565b9150602083013561436d81614330565b809150509250929050565b6001600160a01b0381168114610a6857600080fd5b60006020828403121561439f57600080fd5b813561225481614378565b600080604083850312156143bd57600080fd5b82356143c881614378565b9150602083013561436d81614378565b6000602082840312156143ea57600080fd5b5035919050565b60006020828403121561440357600080fd5b813561225481614330565b6000806040838503121561442157600080fd5b82359150602083013561436d81614378565b6000806040838503121561444657600080fd5b823561445181614378565b946020939093013593505050565b6001600160801b0381168114610a6857600080fd5b6000806000806080858703121561448a57600080fd5b843561449581614330565b935060208501356144a58161445f565b925060408501356144b581614378565b915060608501356144c581614378565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561450f5761450f6144d0565b604052919050565b803563ffffffff81168114612c5957600080fd5b61ffff81168114610a6857600080fd5b60008082840360e081121561454f57600080fd5b833561455a81614378565b925060c0601f198201121561456e57600080fd5b5060405160c0810181811067ffffffffffffffff82111715614592576145926144d0565b8060405250602084013581526040840135602082015260608401356040820152608084013560608201526145c860a08501614517565b608082015260c08401356145db8161452b565b60a0820152919491935090915050565b600080604083850312156145fe57600080fd5b823561460981614378565b915061461760208401614517565b90509250929050565b60006020828403121561463257600080fd5b61225482614517565b6000806000806080858703121561465157600080fd5b843561465c81614378565b935060208501356144a581614378565b6000610120820190506001600160a01b0383511682526020830151602083015260408301516040830152606083015160608301526080830151608083015263ffffffff60a08401511660a083015260c08301516146d460c08401826001600160a01b03169052565b5060e08301516146eb60e084018262ffffff169052565b5061010083810151801515848301526109e3565b60006020828403121561471157600080fd5b813562ffffff8116811461225457600080fd5b634e487b7160e01b600052601160045260246000fd5b60008260020b8260020b028060020b915080821461475a5761475a614724565b5092915050565b600282810b9082900b03627fffff198112627fffff8213171561098957610989614724565b60006020828403121561479857600080fd5b815161225481614378565b80518015158114612c5957600080fd5b600080600080600080600060e0888a0312156147ce57600080fd5b87516147d981614378565b60208901519097506147ea81614330565b60408901519096506147fb8161452b565b606089015190955061480c8161452b565b608089015190945061481d8161452b565b60a089015190935060ff8116811461483457600080fd5b915061484260c089016147a3565b905092959891949750929550565b60006020828403121561486257600080fd5b5051919050565b8181038181111561098957610989614724565b808202811582820484141761098957610989614724565b634e487b7160e01b600052601260045260246000fd5b6000826148b8576148b8614893565b500490565b60008160020b8360020b806148d4576148d4614893565b627fffff198214600019821416156148ee576148ee614724565b90059392505050565b60008160020b627fffff19810361491057614910614724565b60000392915050565b600281810b9083900b01627fffff8113627fffff198212171561098957610989614724565b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b8181101561499257835163ffffffff1683529284019291840191600101614970565b50909695505050505050565b600067ffffffffffffffff8211156149b8576149b86144d0565b5060051b60200190565b600082601f8301126149d357600080fd5b815160206149e86149e38361499e565b6144e6565b82815260059290921b84018101918181019086841115614a0757600080fd5b8286015b84811015614a2b578051614a1e81614378565b8352918301918301614a0b565b509695505050505050565b60008060408385031215614a4957600080fd5b825167ffffffffffffffff80821115614a6157600080fd5b818501915085601f830112614a7557600080fd5b81516020614a856149e38361499e565b82815260059290921b84018101918181019089841115614aa457600080fd5b948201945b83861015614ad25785518060060b8114614ac35760008081fd5b82529482019490820190614aa9565b91880151919650909350505080821115614aeb57600080fd5b50614af8858286016149c2565b9150509250929050565b600682810b9082900b03667fffffffffffff198112667fffffffffffff8213171561098957610989614724565b60008160060b8360060b80614b4657614b46614893565b667fffffffffffff198214600019821416156148ee576148ee614724565b60008260060b80614b7757614b77614893565b808360060b0791505092915050565b60008160020b627fffff198103614b9f57614b9f614724565b6000190192915050565b600060208284031215614bbb57600080fd5b612254826147a3565b81516001600160a01b0316815261016081016020830151614bf060208401826001600160a01b03169052565b506040830151614c07604084018262ffffff169052565b506060830151614c1c606084018260020b9052565b506080830151614c31608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151614c77828501826001600160a01b03169052565b505061014092830151919092015290565b60008060008060808587031215614c9e57600080fd5b845193506020850151614cb08161445f565b6040860151606090960151949790965092505050565b600080600060608486031215614cdb57600080fd5b8351614ce68161445f565b602085015160409095015190969495509392505050565b60005b83811015614d18578181015183820152602001614d00565b50506000910152565b60008251614d33818460208701614cfd565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614d75816017850160208801614cfd565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614db2816028840160208801614cfd565b01602801949350505050565b6020815260008251806020840152614ddd816040850160208701614cfd565b601f01601f19169190910160400192915050565b6000600160ff1b8201614e0657614e06614724565b5060000390565b600082614e1c57614e1c614893565b500690565b8082018082111561098957610989614724565b600081614e4357614e43614724565b50600019019056fe41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646da164736f6c6343000812000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103155760003560e01c806370480275116101a7578063a22f84f0116100ee578063b9c56c8c11610097578063d547741f11610071578063d547741f1461082c578063dc861da61461083f578063ea8668151461094557600080fd5b8063b9c56c8c146107f3578063bef6dc8b14610806578063cc48b9471461081957600080fd5b8063b224f99f116100c8578063b224f99f146107a4578063b44a2722146107b7578063b911135f146107ca57600080fd5b8063a22f84f01461076b578063a41823431461077e578063aec137581461079157600080fd5b806389f395de116101505780639a7b5f111161012a5780639a7b5f111461067e5780639cbbbe8614610756578063a217fddf1461076357600080fd5b806389f395de1461061f57806391d1485414610632578063971c57cc1461066b57600080fd5b80637ca25184116101815780637ca25184146105b75780637fc46ba8146105e3578063826bd4bf1461060c57600080fd5b8063704802751461056a57806375829def1461057d57806375b238fc1461059057600080fd5b806336568abe1161026b57806350d2a27611610214578063550d01a3116101ee578063550d01a3146105275780635b5491821461054a57806363a8fd891461055d57600080fd5b806350d2a276146104bb57806351e8152a146104fc57806352351e851461050f57600080fd5b806343c57a271161024557806343c57a2714610481578063442bede61461049457806345a41148146104a757600080fd5b806336568abe1461044857806337c1cfa51461045b57806340c10f191461046e57600080fd5b8063248a9ca3116102cd5780632f2ff15d116102a75780632f2ff15d1461040e57806335b9ac661461042157806335d20f8a1461043457600080fd5b8063248a9ca3146103c557806324d7806c146103e85780632c00778a146103fb57600080fd5b80631785f53c116102fe5780631785f53c146103685780631e8948c31461037d578063229852461461039057600080fd5b806301ffc9a71461031a5780630f36edbf14610342575b600080fd5b61032d610328366004614306565b610958565b60405190151581526020015b60405180910390f35b61035561035036600461433f565b61098f565b60405160029190910b8152602001610339565b61037b61037636600461438d565b6109eb565b005b61037b61038b3660046143aa565b610a6b565b6103b77ffb5864e8ff833c3cb2d2d08505e82ff02a43554c74a35d4f5a64e8526127831181565b604051908152602001610339565b6103b76103d33660046143d8565b60009081526004602052604090206001015490565b61032d6103f636600461438d565b610c44565b61037b6104093660046143f1565b610c84565b61037b61041c36600461440e565b610d7a565b61037b61042f3660046143aa565b610da4565b600a5461035590600160d81b900460020b81565b61037b61045636600461440e565b610f59565b61037b61046936600461438d565b610fe5565b61037b61047c366004614433565b611628565b6103b761048f366004614474565b611dac565b61037b6104a236600461453b565b611dc3565b600a5461035590600160c01b900460020b81565b6104e46104c9366004614306565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610339565b61032d61050a3660046143aa565b61221e565b6005546104e49061010090046001600160a01b031681565b61032d61053536600461438d565b60026020526000908152604090205460ff1681565b6009546104e4906001600160a01b031681565b60005461032d9060ff1681565b61037b61057836600461438d565b61225b565b61037b61058b36600461438d565b6122d3565b6103b77fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b600a546105ce90600160a01b900463ffffffff1681565b60405163ffffffff9091168152602001610339565b6104e46105f136600461438d565b6006602052600090815260409020546001600160a01b031681565b61035561061a3660046143f1565b612423565b6008546104e4906001600160a01b031681565b61032d61064036600461440e565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61037b6106793660046145eb565b61243e565b6106f661068c36600461438d565b600c602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b039485169593949293919263ffffffff821691640100000000810490911690600160c01b810462ffffff1690600160d81b900460ff1689565b604080516001600160a01b039a8b16815260208101999099528801969096526060870194909452608086019290925263ffffffff1660a085015290931660c083015262ffffff90921660e082015290151561010082015261012001610339565b600b546103559060020b81565b6103b7600081565b6103556107793660046143f1565b612603565b61037b61078c36600461438d565b61261e565b61035561079f36600461433f565b612729565b61037b6107b2366004614620565b61277d565b600a546104e4906001600160a01b031681565b6104e46107d83660046143d8565b6001602052600090815260409020546001600160a01b031681565b61037b6108013660046143f1565b61287a565b61037b61081436600461463b565b612970565b6007546104e4906001600160a01b031681565b61037b61083a36600461440e565b612bdf565b61093861084d36600461438d565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810191909152506001600160a01b039081166000908152600c6020908152604091829020825161012081018452815485168152600182015492810192909252600281015492820192909252600382015460608201526004820154608082015260059091015463ffffffff811660a0830152640100000000810490921660c0820152600160c01b820462ffffff1660e0820152600160d81b90910460ff16151561010082015290565b604051610339919061466c565b6103556109533660046146ff565b612c04565b60006001600160e01b03198216637965db0b60e01b148061098957506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008061099b83612423565b600a549091506000906109b890600160c01b900460020b8561473a565b6109c29086614761565b90508060020b8260020b12156109db5791506109899050565b509050610989565b505092915050565b6109f433610c44565b610a3e5760405162461bcd60e51b81526020600482015260226024820152600080516020614e4c83398151915260448201526134b760f11b60648201526084015b60405180910390fd5b610a687fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610f59565b50565b816001600160a01b038116610aa75760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b816001600160a01b038116610ae35760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b6001600160a01b0380851660009081526006602052604090205485911615801590610b2757506001600160a01b038181166000908152600660205260409020541633145b610b815760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b6064820152608401610a35565b6001600160a01b03858116600090815260066020526040902054818616911603610bd65760405162461bcd60e51b8152600401610a359060208082526004908201526373616d6560e01b604082015260600190565b6001600160a01b0385811660008181526006602090815260409182902080546001600160a01b031916948916948517905581519283528201929092527fb00bb4c229aff6156cc8e2c767c571665e1927c09fe083ec055956a5a4026193910160405180910390a15050505050565b6001600160a01b03811660009081527f2fb794d17134dfdec181ddbac1babb5ab1eb140204ef4d982f294e7fc8b69022602052604081205460ff16610989565b610c8d33610c44565b610cd25760405162461bcd60e51b81526020600482015260226024820152600080516020614e4c83398151915260448201526134b760f11b6064820152608401610a35565b60008160020b13610d0e5760405162461bcd60e51b8152600401610a35906020808252600490820152637a65726f60e01b604082015260600190565b600a54600282810b600160d81b909204900b03610d565760405162461bcd60e51b8152600401610a359060208082526004908201526373616d6560e01b604082015260600190565b600a805462ffffff909216600160d81b0262ffffff60d81b19909216919091179055565b600082815260046020526040902060010154610d9581612c5e565b610d9f8383612c68565b505050565b816001600160a01b038116610de05760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b816001600160a01b038116610e1c5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b60055461010090046001600160a01b031615801590610e4a575060055461010090046001600160a01b031633145b610e965760405162461bcd60e51b815260206004820152601e60248201527f63616c6c6572206973206e6f74206c3250726f6a6563744d616e6167657200006044820152606401610a35565b6001600160a01b03848116600090815260066020526040902054818516911603610eeb5760405162461bcd60e51b8152600401610a359060208082526004908201526373616d6560e01b604082015260600190565b6001600160a01b0384811660008181526006602090815260409182902080546001600160a01b031916948816948517905581519283528201929092527fb00bb4c229aff6156cc8e2c767c571665e1927c09fe083ec055956a5a402619391015b60405180910390a150505050565b6001600160a01b0381163314610fd75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610a35565b610fe18282612d0a565b5050565b6001600160a01b0381166000908152600c60205260409020600501548190600160d81b900460ff16156110655760405162461bcd60e51b815260206004820152602260248201527f5661756c743a20616c726561647920726561647920746f20437265617465506f6044820152611bdb60f21b6064820152608401610a35565b60055460ff166110a05760405162461bcd60e51b8152600401610a35906020808252600490820152636c6f636b60e01b604082015260600190565b6005805460ff191681556001600160a01b0383166000908152600c602052604090209081015463ffffffff16158015906110e65750600581015463ffffffff4281169116105b6111325760405162461bcd60e51b815260206004820152601960248201527f537461727454696d6520686173206e6f74207061737365642e000000000000006044820152606401610a35565b80546001600160a01b03161561118a5760405162461bcd60e51b815260206004820152600f60248201527f616c7265616479206372656174656400000000000000000000000000000000006044820152606401610a35565b600581015464010000000090046001600160a01b03166111ec5760405162461bcd60e51b815260206004820152601560248201527f7a65726f20696e697453717274507269636558393600000000000000000000006044820152606401610a35565b6009546008546005830154604051630b4c774160e11b81526001600160a01b0392831660048201528683166024820152600160c01b90910462ffffff1660448201526000929190911690631698ee8290606401602060405180830381865afa15801561125c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112809190614786565b90506001600160a01b03811661138157600954600854600584015460405163a167129560e01b81526001600160a01b0392831660048201528783166024820152600160c01b90910462ffffff166044820152600092919091169063a1671295906064016020604051808303816000875af1158015611302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113269190614786565b90506001600160a01b03811661137e5760405162461bcd60e51b815260206004820152600f60248201527f637265617465506f6f6c206661696c00000000000000000000000000000000006044820152606401610a35565b90505b81546001600160a01b0382166001600160a01b0319909116811783556005830180547fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160d81b17905560408051633850c7bd60e01b8152905160009291633850c7bd9160048083019260e09291908290030181865afa15801561140b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142f91906147b3565b5050505050509050806001600160a01b031660000361150b57600583015460405163f637731d60e01b81526401000000009091046001600160a01b03908116600483015283169063f637731d90602401600060405180830381600087803b15801561149957600080fd5b505af11580156114ad573d6000803e3d6000fd5b505050506005830154604080516001600160a01b038881168252858116602083015264010000000090930490921682820152517fca9098798fa03760d7709c3305b3b049d2c71fa6e891a83a36fe90a15eeab7809181900360600190a15b604080516001600160a01b038088168252841660208201527ffb9092f7bd4a3c6c55439411fb56fe4d44878125340b674c6ab5b5dda38d0b1c910160405180910390a16000826001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa15801561158e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b291906147b3565b5050505050509050806001600160a01b03166000036116135760405162461bcd60e51b815260206004820152601260248201527f7a65726f205f73717274507269636558393600000000000000000000000000006044820152606401610a35565b50506005805460ff1916600117905550505050565b6001600160a01b0382166000908152600c60205260409020600501548290600160d81b900460ff1661169c5760405162461bcd60e51b815260206004820152601e60248201527f5661756c743a206e6f7420726561647920746f20437265617465506f6f6c00006044820152606401610a35565b81806000036116d25760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610a35565b60055460ff1661170d5760405162461bcd60e51b8152600401610a35906020808252600490820152636c6f636b60e01b604082015260600190565b6005805460ff191690556008546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611760573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117849190614850565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038716906370a0823190602401602060405180830381865afa1580156117ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f29190614850565b9050670de0b6b3a7640000821180156118125750670de0b6b3a764000081115b61185e5760405162461bcd60e51b815260206004820152601760248201527f62616c616e636520697320696e73756666696369656e740000000000000000006044820152606401610a35565b818511156118ae5760405162461bcd60e51b815260206004820152601960248201527f746f42616c616e636520697320696e73756666696369656e74000000000000006044820152606401610a35565b600a54600160c01b900460020b6000036118d857600a805462ffffff60c01b1916600160c31b1790555b600a54600160d81b900460020b60000361190257600a805462ffffff60d81b1916600560d91b1790555b600a54600160a01b900463ffffffff1660000361194157600a805463ffffffff60a01b1916747800000000000000000000000000000000000000001790555b6001600160a01b038681166000908152600c602090815260408083208151610120810183528154861680825260018301549482019490945260028201548184015260038201546060820152600480830154608083015260059092015463ffffffff811660a0830152640100000000810490961660c0820152600160c01b860462ffffff1660e080830191909152600160d81b90960460ff1615156101008201528251633850c7bd60e01b815292519095859485949093633850c7bd9382820193929091908290030181865afa158015611a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4291906147b3565b505050935050925092506000836001600160a01b031611611aa55760405162461bcd60e51b815260206004820152601760248201527f706f6f6c206973206e6f7420696e697469616c697a65640000000000000000006044820152606401610a35565b60018161ffff161115611b67578351600a54600091611ad091600160a01b900463ffffffff16612d8d565b90508260020b611ae7826103508860e00151612c04565b60020b13158015611b0d5750611b048161079f8760e00151612c04565b60020b8360020b125b611b655760405162461bcd60e51b8152602060048201526024808201527f49742773206e6f7420616c6c6f776564206368616e676564207469636b2072616044820152633733b29760e11b6064820152608401610a35565b505b600080600086600001516001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd29190614786565b6008549091508d906001600160a01b03808416911614611c6b57600854611c069087908f906001600160a01b031684611dac565b93508c925088841115611c5b5760405162461bcd60e51b815260206004820152601c60248201527f746f6b656e42616c616e636520697320696e73756666696369656e74000000006044820152606401610a35565b611c66818486612f4c565b611ce5565b6008548d9450611c8890879086906001600160a01b031684611dac565b925088831115611cda5760405162461bcd60e51b815260206004820152601c60248201527f746f6b656e42616c616e636520697320696e73756666696369656e74000000006044820152606401610a35565b611ce5818585612f4c565b600a54600090606490611d0290600160d81b900460020b82614869565b611d0c908761487c565b611d1691906148a9565b600a54909150600090606490611d3690600160d81b900460020b82614869565b611d40908761487c565b611d4a91906148a9565b6001600160a01b0384166000908152600c602052604081206004015491925003611d8057611d7b838787858561342e565b611d8d565b611d8d8387878585613812565b50506005805460ff191660011790555050505050505050505050505050565b6000611dba858585856139a7565b95945050505050565b600554829061010090046001600160a01b0316331480611e2057506001600160a01b038181166000908152600660205260409020541615801590611e2057506001600160a01b038181166000908152600660205260409020541633145b611e925760405162461bcd60e51b815260206004820152602c60248201527f63616c6c6572206973206e6f742061207661756c7441646d696e206f7220507260448201527f6f6a6563744d616e6167657200000000000000000000000000000000000000006064820152608401610a35565b6009546001600160a01b031615801590611eb65750600a546001600160a01b031615155b8015611ecc57506008546001600160a01b031615155b611f185760405162461bcd60e51b815260206004820152601860248201527f5661756c743a206265666f726520736574556e697377617000000000000000006044820152606401610a35565b6001600160a01b0383166000908152600c602052604090206001015415611f815760405162461bcd60e51b815260206004820152601360248201527f616c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610a35565b815115801590611f945750602082015115155b8015611fa35750604082015115155b8015611fb25750606082015115155b8015611fc5575060a082015161ffff1615155b61205d5760405162461bcd60e51b815260206004820152605460248201527f7a65726f20746f74616c416c6c6f6361746564416d6f756e74206f7220746f7360448201527f5072696365206f7220746f6b656e5072696365206f7220696e6974537172745060648201527f72696365583936206f7220737461727454696d65000000000000000000000000608482015260a401610a35565b4263ffffffff16826080015163ffffffff16116120bc5760405162461bcd60e51b815260206004820152601460248201527f537461727454696d6520686173207061737365640000000000000000000000006044820152606401610a35565b60055482516120e0916001600160a01b038681169261010090920416903090613ab5565b6001600160a01b038084166000908152600c602090815260409182902085516001820181905591860151600282018190558684015160038301819055606088015160058401805460808b015160a08c0151600160c01b61ffff8216027fffffffffff000000ffffffffffffffffffffffffffffffffffffffff000000009b8616640100000000029b909b167fffffffffff0000000000000000000000000000000000000000000000000000009093169290921763ffffffff82161799909917909155955193967f060a95341b2743fc4109ee31674ef362aca6cdea36c46a5ed759920b83e244b096610f4b968c969095949391906001600160a01b03978816815260208101969096526040860194909452606085019290925263ffffffff16608084015290921660a082015261ffff9190911660c082015260e00190565b60006001600160a01b0382161580159061225457506001600160a01b038381166000908152600660205260409020548116908316145b9392505050565b61226433610c44565b6122a95760405162461bcd60e51b81526020600482015260226024820152600080516020614e4c83398151915260448201526134b760f11b6064820152608401610a35565b610a687fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610d7a565b6122dc33610c44565b6123215760405162461bcd60e51b81526020600482015260226024820152600080516020614e4c83398151915260448201526134b760f11b6064820152608401610a35565b6001600160a01b0381166123775760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f206164647265737300000000000000006044820152606401610a35565b6001600160a01b03811633036123cf5760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e000000000000000000006044820152606401610a35565b6123f97fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610d7a565b610a687fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4233610f59565b60008161243481620d89e7196148bd565b610989919061473a565b6001600160a01b038083166000908152600660205260409020548391161580159061248257506001600160a01b038181166000908152600660205260409020541633145b6124dc5760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b6064820152608401610a35565b6001600160a01b0383166000908152600c60205260409020600581015463ffffffff16421061254d5760405162461bcd60e51b815260206004820152601460248201527f537461727454696d6520686173207061737365640000000000000000000000006044820152606401610a35565b600581015463ffffffff8085169116036125a95760405162461bcd60e51b815260206004820152600e60248201527f73616d6520537461727454696d650000000000000000000000000000000000006044820152606401610a35565b60058101805463ffffffff191663ffffffff8516908117909155604080516001600160a01b038716815260208101929092527f1266d1525c8a4b88d83deeed8ccc3a233c359b7bd54f50c0b4ba71c4a330f5b59101610f4b565b60008180612614620d89e7196148f7565b61243491906148bd565b806001600160a01b03811661265a5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b61266333610c44565b6126a85760405162461bcd60e51b81526020600482015260226024820152600080516020614e4c83398151915260448201526134b760f11b6064820152608401610a35565b6005546001600160a01b0380841661010090920416036126f35760405162461bcd60e51b8152600401610a359060208082526004908201526373616d6560e01b604082015260600190565b50600580546001600160a01b039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b60008061273583612603565b600a5490915060009061275290600160c01b900460020b8561473a565b61275c9086614919565b90508060020b8260020b121561277457509050610989565b91506109899050565b61278633610c44565b6127cb5760405162461bcd60e51b81526020600482015260226024820152600080516020614e4c83398151915260448201526134b760f11b6064820152608401610a35565b60008163ffffffff161161280a5760405162461bcd60e51b8152600401610a35906020808252600490820152637a65726f60e01b604082015260600190565b600a5463ffffffff808316600160a01b90920416036128545760405162461bcd60e51b8152600401610a359060208082526004908201526373616d6560e01b604082015260600190565b600a805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b61288333610c44565b6128c85760405162461bcd60e51b81526020600482015260226024820152600080516020614e4c83398151915260448201526134b760f11b6064820152608401610a35565b60008160020b136129045760405162461bcd60e51b8152600401610a35906020808252600490820152637a65726f60e01b604082015260600190565b600a54600282810b600160c01b909204900b0361294c5760405162461bcd60e51b8152600401610a359060208082526004908201526373616d6560e01b604082015260600190565b600a805462ffffff909216600160c01b0262ffffff60c01b19909216919091179055565b61297933610c44565b6129be5760405162461bcd60e51b81526020600482015260226024820152600080516020614e4c83398151915260448201526134b760f11b6064820152608401610a35565b836001600160a01b0381166129fa5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b836001600160a01b038116612a365760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b836001600160a01b038116612a725760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b836001600160a01b038116612aae5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610a35565b6009546001600160a01b038981169116141580612ad95750600a546001600160a01b03888116911614155b80612af257506007546001600160a01b03878116911614155b80612b0b57506008546001600160a01b03868116911614155b612b405760405162461bcd60e51b8152600401610a359060208082526004908201526373616d6560e01b604082015260600190565b600980546001600160a01b038a81166001600160a01b03199283168117909355600a80548b83169084168117909155600780548b8416908516811790915560088054938b1693909416831790935560408051948552602085019190915283019190915260608201527f5f5458e04fbfd7e3d6d9563a2da2ea2a5b3a29c1303221569d209c8c673ceacc9060800160405180910390a15050505050505050565b600082815260046020526040902060010154612bfa81612c5e565b610d9f8383612d0a565b60008162ffffff16606403612c1b57506002919050565b8162ffffff166101f403612c315750600a919050565b8162ffffff16610bb803612c475750603c919050565b8162ffffff1661271003612c59575060c85b919050565b610a688133613bee565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16610fe15760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612cc63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff1615610fe15760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008163ffffffff16600003612dca5760405162461bcd60e51b8152602060048201526002602482015261042560f41b6044820152606401610a35565b6040805160028082526060820183526000926020830190803683370190505090508281600081518110612dff57612dff61493e565b602002602001019063ffffffff16908163ffffffff1681525050600081600181518110612e2e57612e2e61493e565b63ffffffff9092166020928302919091019091015260405163883bdbfd60e01b81526000906001600160a01b0386169063883bdbfd90612e72908590600401614954565b600060405180830381865afa158015612e8f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612eb79190810190614a36565b509050600081600081518110612ecf57612ecf61493e565b602002602001015182600181518110612eea57612eea61493e565b6020026020010151612efc9190614b02565b9050612f0c600386900b82614b2f565b935060008160060b128015612f305750612f2a600386900b82614b64565b60060b15155b15612f435783612f3f81614b86565b9450505b50505092915050565b6008546040516370a0823160e01b815230600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa158015612f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb89190614850565b10156130065760405162461bcd60e51b815260206004820152601460248201527f746f7320697320696e73756666696369656e742e0000000000000000000000006044820152606401610a35565b6040516370a0823160e01b815230600482015281906001600160a01b038516906370a0823190602401602060405180830381865afa15801561304c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130709190614850565b10156130be5760405162461bcd60e51b815260206004820152601660248201527f746f6b656e20697320696e73756666696369656e742e000000000000000000006044820152606401610a35565b600854600a54604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015291169063dd62ed3e90604401602060405180830381865afa158015613110573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131349190614850565b82111561327157600854600a54604080516318160ddd60e01b815290516001600160a01b039384169363095ea7b393169184916318160ddd916004808201926020929091908290030181865afa158015613192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b69190614850565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015613201573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132259190614ba9565b6132715760405162461bcd60e51b815260206004820152601060248201527f544f5320617070726f7665206661696c000000000000000000000000000000006044820152606401610a35565b600a54604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529084169063dd62ed3e90604401602060405180830381865afa1580156132c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e59190614850565b811115610d9f57826001600160a01b031663095ea7b3600a60009054906101000a90046001600160a01b0316856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561334f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133739190614850565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156133be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e29190614ba9565b610d9f5760405162461bcd60e51b815260206004820152601260248201527f746f6b656e20617070726f7665206661696c00000000000000000000000000006044820152606401610a35565b6001600160a01b0385166000908152600c602052604090206004810154156134985760405162461bcd60e51b815260206004820152600e60248201527f616c7265616479206d696e7465640000000000000000000000000000000000006044820152606401610a35565b60058101546000906134b590600160c01b900462ffffff16612c04565b60058301546134cf90600160c01b900462ffffff16612c04565b6134dd90620d89e7196148bd565b6134e7919061473a565b905060006135078360050160189054906101000a900462ffffff16612c04565b600584015461352190600160c01b900462ffffff16612c04565b61352e620d89e7196148f7565b61353891906148bd565b613542919061473a565b600a546040805161016081018083528754630dfe168160e01b90915291519394506000938493849384936001600160a01b0392831693638831645693919283921690630dfe168190610164808501916020918187030181865afa1580156135ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135d19190614786565b6001600160a01b031681526020018a60000160009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136589190614786565b6001600160a01b031681526020018a60050160189054906101000a900462ffffff1662ffffff1681526020018960020b81526020018860020b81526020018e81526020018d81526020018c81526020018b8152602001306001600160a01b03168152602001428152506040518263ffffffff1660e01b81526004016136dd9190614bc4565b6080604051808303816000875af11580156136fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137209190614c88565b9350935093509350600084116137785760405162461bcd60e51b815260206004820152600c60248201527f7a65726f20746f6b656e496400000000000000000000000000000000000000006044820152606401610a35565b6004870184905586546040517e80a7e05c1e726da26ef60dc270a12c37b0bc54fc6adbc18d22f991976cf332916137fc918f916001600160a01b03169088908890889088906001600160a01b03968716815294909516602085015260408401929092526001600160801b03166060830152608082015260a081019190915260c00190565b60405180910390a1505050505050505050505050565b6001600160a01b0385166000908152600c60205260409020600481015461387b5760405162461bcd60e51b815260206004820152601460248201527f4974206973206e6f74206d696e746564207965740000000000000000000000006044820152606401610a35565b600a546040805160c08101825260048481015482526020820189815282840189815260608401898152608085018981524260a08701908152965163219f5d1760e01b815295519486019490945291516024850152516044840152516064830152516084820152905160a4820152600091829182916001600160a01b03169063219f5d179060c4016060604051808303816000875af1158015613921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139459190614cc6565b6004870154604080516001600160801b0386168152602081018590529081018390529396509194509250907e242840c59a1b38c7f01b50c3ba18ebd1a8f5b28cfc8b9fb894c4ea46696ba49060600160405180910390a2505050505050505050565b6000806139b386613c63565b90506001600160801b036001600160a01b03821611613a395760006139e16001600160a01b0383168061487c565b9050836001600160a01b0316856001600160a01b031610613a1957613a14600160c01b876001600160801b031683614083565b613a31565b613a3181876001600160801b0316600160c01b614083565b925050613aac565b6000613a586001600160a01b0383168068010000000000000000614083565b9050836001600160a01b0316856001600160a01b031610613a9057613a8b600160801b876001600160801b031683614083565b613aa8565b613aa881876001600160801b0316600160801b614083565b9250505b50949350505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b1790529151600092839290881691613b2e9190614d21565b6000604051808303816000865af19150503d8060008114613b6b576040519150601f19603f3d011682016040523d82523d6000602084013e613b70565b606091505b5091509150818015613b9a575080511580613b9a575080806020019051810190613b9a9190614ba9565b613be65760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606401610a35565b505050505050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16610fe157613c218161414b565b613c2c83602061415d565b604051602001613c3d929190614d3d565b60408051601f198184030181529082905262461bcd60e51b8252610a3591600401614dbe565b60008060008360020b12613c7a578260020b613c87565b8260020b613c8790614df1565b9050613c96620d89e7196148f7565b60020b811115613ccc5760405162461bcd60e51b81526020600482015260016024820152601560fa1b6044820152606401610a35565b600081600116600003613ce357600160801b613cf5565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615613d34576080613d2f826ffff97272373d413259a46990580e213a61487c565b901c90505b6004821615613d5e576080613d59826ffff2e50f5f656932ef12357cf3c7fdcc61487c565b901c90505b6008821615613d88576080613d83826fffe5caca7e10e4e61c3624eaa0941cd061487c565b901c90505b6010821615613db2576080613dad826fffcb9843d60f6159c9db58835c92664461487c565b901c90505b6020821615613ddc576080613dd7826fff973b41fa98c081472e6896dfb254c061487c565b901c90505b6040821615613e06576080613e01826fff2ea16466c96a3843ec78b326b5286161487c565b901c90505b6080821615613e30576080613e2b826ffe5dee046a99a2a811c461f1969c305361487c565b901c90505b610100821615613e5b576080613e56826ffcbe86c7900a88aedcffc83b479aa3a461487c565b901c90505b610200821615613e86576080613e81826ff987a7253ac413176f2b074cf7815e5461487c565b901c90505b610400821615613eb1576080613eac826ff3392b0822b70005940c7a398e4b70f361487c565b901c90505b610800821615613edc576080613ed7826fe7159475a2c29b7443b29c7fa6e889d961487c565b901c90505b611000821615613f07576080613f02826fd097f3bdfd2022b8845ad8f792aa582561487c565b901c90505b612000821615613f32576080613f2d826fa9f746462d870fdf8a65dc1f90e061e561487c565b901c90505b614000821615613f5d576080613f58826f70d869a156d2a1b890bb3df62baf32f761487c565b901c90505b618000821615613f88576080613f83826f31be135f97d08fd981231505542fcfa661487c565b901c90505b62010000821615613fb4576080613faf826f09aa508b5b7a84e1c677de54f3e99bc961487c565b901c90505b62020000821615613fdf576080613fda826e5d6af8dedb81196699c329225ee60461487c565b901c90505b62040000821615614009576080614004826d2216e584f5fa1ea926041bedfe9861487c565b901c90505b6208000082161561403157608061402c826b048a170391f7dc42444e8fa261487c565b901c90505b60008460020b131561404c57614049816000196148a9565b90505b61405b64010000000082614e0d565b1561406757600161406a565b60005b61407b9060ff16602083901c614e21565b949350505050565b600080821161409157600080fd5b600080600019858709858702925082811083820303915050806000036140bc57508290049050612254565b8084116140c857600080fd5b6000848688098084039381119092039190506000856140e981600019614869565b6140f4906001614e21565b16958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030260008290038290046001019490940294049390931791909102925050509392505050565b60606109896001600160a01b03831660145b6060600061416c83600261487c565b614177906002614e21565b67ffffffffffffffff81111561418f5761418f6144d0565b6040519080825280601f01601f1916602001820160405280156141b9576020820181803683370190505b509050600360fc1b816000815181106141d4576141d461493e565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106142035761420361493e565b60200101906001600160f81b031916908160001a905350600061422784600261487c565b614232906001614e21565b90505b60018111156142b7577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106142735761427361493e565b1a60f81b8282815181106142895761428961493e565b60200101906001600160f81b031916908160001a90535060049490941c936142b081614e34565b9050614235565b5083156122545760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a35565b60006020828403121561431857600080fd5b81356001600160e01b03198116811461225457600080fd5b8060020b8114610a6857600080fd5b6000806040838503121561435257600080fd5b823561435d81614330565b9150602083013561436d81614330565b809150509250929050565b6001600160a01b0381168114610a6857600080fd5b60006020828403121561439f57600080fd5b813561225481614378565b600080604083850312156143bd57600080fd5b82356143c881614378565b9150602083013561436d81614378565b6000602082840312156143ea57600080fd5b5035919050565b60006020828403121561440357600080fd5b813561225481614330565b6000806040838503121561442157600080fd5b82359150602083013561436d81614378565b6000806040838503121561444657600080fd5b823561445181614378565b946020939093013593505050565b6001600160801b0381168114610a6857600080fd5b6000806000806080858703121561448a57600080fd5b843561449581614330565b935060208501356144a58161445f565b925060408501356144b581614378565b915060608501356144c581614378565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561450f5761450f6144d0565b604052919050565b803563ffffffff81168114612c5957600080fd5b61ffff81168114610a6857600080fd5b60008082840360e081121561454f57600080fd5b833561455a81614378565b925060c0601f198201121561456e57600080fd5b5060405160c0810181811067ffffffffffffffff82111715614592576145926144d0565b8060405250602084013581526040840135602082015260608401356040820152608084013560608201526145c860a08501614517565b608082015260c08401356145db8161452b565b60a0820152919491935090915050565b600080604083850312156145fe57600080fd5b823561460981614378565b915061461760208401614517565b90509250929050565b60006020828403121561463257600080fd5b61225482614517565b6000806000806080858703121561465157600080fd5b843561465c81614378565b935060208501356144a581614378565b6000610120820190506001600160a01b0383511682526020830151602083015260408301516040830152606083015160608301526080830151608083015263ffffffff60a08401511660a083015260c08301516146d460c08401826001600160a01b03169052565b5060e08301516146eb60e084018262ffffff169052565b5061010083810151801515848301526109e3565b60006020828403121561471157600080fd5b813562ffffff8116811461225457600080fd5b634e487b7160e01b600052601160045260246000fd5b60008260020b8260020b028060020b915080821461475a5761475a614724565b5092915050565b600282810b9082900b03627fffff198112627fffff8213171561098957610989614724565b60006020828403121561479857600080fd5b815161225481614378565b80518015158114612c5957600080fd5b600080600080600080600060e0888a0312156147ce57600080fd5b87516147d981614378565b60208901519097506147ea81614330565b60408901519096506147fb8161452b565b606089015190955061480c8161452b565b608089015190945061481d8161452b565b60a089015190935060ff8116811461483457600080fd5b915061484260c089016147a3565b905092959891949750929550565b60006020828403121561486257600080fd5b5051919050565b8181038181111561098957610989614724565b808202811582820484141761098957610989614724565b634e487b7160e01b600052601260045260246000fd5b6000826148b8576148b8614893565b500490565b60008160020b8360020b806148d4576148d4614893565b627fffff198214600019821416156148ee576148ee614724565b90059392505050565b60008160020b627fffff19810361491057614910614724565b60000392915050565b600281810b9083900b01627fffff8113627fffff198212171561098957610989614724565b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b8181101561499257835163ffffffff1683529284019291840191600101614970565b50909695505050505050565b600067ffffffffffffffff8211156149b8576149b86144d0565b5060051b60200190565b600082601f8301126149d357600080fd5b815160206149e86149e38361499e565b6144e6565b82815260059290921b84018101918181019086841115614a0757600080fd5b8286015b84811015614a2b578051614a1e81614378565b8352918301918301614a0b565b509695505050505050565b60008060408385031215614a4957600080fd5b825167ffffffffffffffff80821115614a6157600080fd5b818501915085601f830112614a7557600080fd5b81516020614a856149e38361499e565b82815260059290921b84018101918181019089841115614aa457600080fd5b948201945b83861015614ad25785518060060b8114614ac35760008081fd5b82529482019490820190614aa9565b91880151919650909350505080821115614aeb57600080fd5b50614af8858286016149c2565b9150509250929050565b600682810b9082900b03667fffffffffffff198112667fffffffffffff8213171561098957610989614724565b60008160060b8360060b80614b4657614b46614893565b667fffffffffffff198214600019821416156148ee576148ee614724565b60008260060b80614b7757614b77614893565b808360060b0791505092915050565b60008160020b627fffff198103614b9f57614b9f614724565b6000190192915050565b600060208284031215614bbb57600080fd5b612254826147a3565b81516001600160a01b0316815261016081016020830151614bf060208401826001600160a01b03169052565b506040830151614c07604084018262ffffff169052565b506060830151614c1c606084018260020b9052565b506080830151614c31608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151614c77828501826001600160a01b03169052565b505061014092830151919092015290565b60008060008060808587031215614c9e57600080fd5b845193506020850151614cb08161445f565b6040860151606090960151949790965092505050565b600080600060608486031215614cdb57600080fd5b8351614ce68161445f565b602085015160409095015190969495509392505050565b60005b83811015614d18578181015183820152602001614d00565b50506000910152565b60008251614d33818460208701614cfd565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614d75816017850160208801614cfd565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614db2816028840160208801614cfd565b01602801949350505050565b6020815260008251806020840152614ddd816040850160208701614cfd565b601f01601f19169190910160400192915050565b6000600160ff1b8201614e0657614e06614724565b5060000390565b600082614e1c57614e1c614893565b500690565b8082018082111561098957610989614724565b600081614e4357614e43614724565b50600019019056fe41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646da164736f6c6343000812000a",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "details": "add admin",
        "params": {
          "account": "address to add"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAdmin(address)": {
        "details": "whether admin",
        "params": {
          "account": "address to check"
        }
      },
      "removeAdmin(address)": {
        "details": "remove admin",
        "params": {
          "account": "address to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferAdmin(address)": {
        "details": "transfer admin",
        "params": {
          "newAdmin": "new admin address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8669,
        "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
        "label": "pauseProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8673,
        "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
        "label": "proxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 8677,
        "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
        "label": "aliveImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8681,
        "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
        "label": "selectorImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 24,
        "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 5165,
        "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
        "label": "free",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 5167,
        "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
        "label": "l2ProjectManager",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5171,
        "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
        "label": "vaultAdminOfToken",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6782,
        "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
        "label": "ton",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 6784,
        "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
        "label": "tos",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 6786,
        "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
        "label": "uniswapV3Factory",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 6788,
        "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
        "label": "nonfungiblePositionManager",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 6790,
        "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
        "label": "TWAP_PERIOD",
        "offset": 20,
        "slot": "10",
        "type": "t_uint32"
      },
      {
        "astId": 6792,
        "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
        "label": "acceptTickChangeInterval",
        "offset": 24,
        "slot": "10",
        "type": "t_int24"
      },
      {
        "astId": 6794,
        "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
        "label": "acceptSlippagePrice",
        "offset": 27,
        "slot": "10",
        "type": "t_int24"
      },
      {
        "astId": 6796,
        "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
        "label": "tickSpacings",
        "offset": 0,
        "slot": "11",
        "type": "t_int24"
      },
      {
        "astId": 6801,
        "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
        "label": "poolInfo",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(PoolInfo)7970_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(PoolInfo)7970_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibInitialLiquidityVault.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)7970_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(PoolInfo)7970_storage": {
        "encoding": "inplace",
        "label": "struct LibInitialLiquidityVault.PoolInfo",
        "members": [
          {
            "astId": 7953,
            "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
            "label": "pool",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7955,
            "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
            "label": "totalAllocatedAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7957,
            "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
            "label": "initialTosPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7959,
            "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
            "label": "initialTokenPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7961,
            "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
            "label": "lpToken",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7963,
            "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
            "label": "startTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 7965,
            "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
            "label": "initSqrtPriceX96",
            "offset": 4,
            "slot": "5",
            "type": "t_uint160"
          },
          {
            "astId": 7967,
            "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
            "label": "fee",
            "offset": 24,
            "slot": "5",
            "type": "t_uint24"
          },
          {
            "astId": 7969,
            "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
            "label": "boolReadyToCreatePool",
            "offset": 27,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/L2/vaults/L2InitialLiquidityVault.sol:L2InitialLiquidityVault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}